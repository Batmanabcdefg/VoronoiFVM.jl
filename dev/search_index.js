var documenterSearchIndex = {"docs":
[{"location":"examples/Example125_TestFunctions1D/#:-Terminal-flux-calculation-via-test-functions","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"","category":"section"},{"location":"examples/Example125_TestFunctions1D/","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"(source code)","category":"page"},{"location":"examples/Example125_TestFunctions1D/","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"For a rather comprehensive explanation see 225: Terminal flux calculation via test functions, nD","category":"page"},{"location":"examples/Example125_TestFunctions1D/","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"module Example125_TestFunctions1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\n\nfunction main(;n=100,Plotter=nothing,verbose=false,unknown_storage=:sparse)\n    h=1/n\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n\n    eps=[1,1.0e-1]\n\n    physics=VoronoiFVM.Physics(\n         num_species=2,\n    reaction=function(f,u,node)\n        f[1]=10*(u[1]-u[2])\n        f[2]=10*(u[2]-u[1])\n    end,\n\n    flux=function(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=eps[1]*(u[1,1]-u[1,2])\n        f[2]=eps[2]*(u[2,1]-u[2,2])\n    end,\n\n\n    storage=function(f,u,node)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n    )\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    boundary_neumann!(sys,1,1,0.01)\n    boundary_dirichlet!(sys,2,2,0.0)\n\n    factory=VoronoiFVM.TestFunctionFactory(sys)\n    tf1=testfunction(factory,[2],[1])\n    tf2=testfunction(factory,[1],[2])\n\n\n    U=unknowns(sys)\n    inival=unknowns(sys)\n    inival[2,:].=0.1\n    inival[1,:].=0.1\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.damp_initial=0.1\n    I1=0\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    for xeps in [1.0,0.1,0.01]\n        eps=[xeps,xeps]\n        solve!(U,inival,sys,control=control)\n        I1=integrate(sys,tf1,U)\n        coord=coordinates(grid)\n        inival.=U\n        scalarplot!(p[1,1],grid,U[1,:])\n        scalarplot!(p[2,1],grid,U[2,:])\n        reveal(p)\n        u5=U[5]\n    end\n    return I1[1]\nend\n\nfunction test()\n    main(unknown_storage=:sparse) ≈ 0.01 &&\n        main(unknown_storage=:dense) ≈ 0.01\nend\nend","category":"page"},{"location":"examples/Example125_TestFunctions1D/","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"","category":"page"},{"location":"examples/Example125_TestFunctions1D/","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example201_Laplace2D/#:-2D-Laplace-equation","page":"201: 2D Laplace equation","title":"201: 2D Laplace equation","text":"","category":"section"},{"location":"examples/Example201_Laplace2D/","page":"201: 2D Laplace equation","title":"201: 2D Laplace equation","text":"(source code)","category":"page"},{"location":"examples/Example201_Laplace2D/","page":"201: 2D Laplace equation","title":"201: 2D Laplace equation","text":"module Example201_Laplace2D\n\nusing VoronoiFVM,ExtendableGrids\nusing GridVisualize\n\n\n# Flux function which describes the flux\n# between neigboring control volumes\nfunction g!(f,u0,edge)\n    u=unknowns(edge,u0)\n    f[1]=u[1,1]-u[1,2]\nend\n\n\nfunction main(;Plotter=nothing)\n    nspecies=1\n    ispec=1\n    X=collect(0:0.2:1)\n    grid=VoronoiFVM.Grid(X,X)\n    physics=VoronoiFVM.Physics(num_species=nspecies,flux=g!)\n    sys=VoronoiFVM.System(grid,physics)\n    enable_species!(sys,ispec,[1])\n    boundary_dirichlet!(sys,ispec,1,0.0)\n    boundary_dirichlet!(sys,ispec,3,1.0)\n    inival=unknowns(sys,inival=0)\n    solution=unknowns(sys)\n    solve!(solution,inival,sys)\n    scalarplot(grid,solution[1,:],Plotter=Plotter)\n    return solution[7]\nend\n\n# Called by unit test\n\nfunction test()\n    main() ≈ 0.2\nend\n\nend","category":"page"},{"location":"examples/Example201_Laplace2D/","page":"201: 2D Laplace equation","title":"201: 2D Laplace equation","text":"","category":"page"},{"location":"examples/Example201_Laplace2D/","page":"201: 2D Laplace equation","title":"201: 2D Laplace equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example225_TestFunctions2D/#:-Terminal-flux-calculation-via-test-functions,-nD","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"","category":"section"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"(source code)","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"After calculating solutions based on the finite volume method, it may be interesting to obtain information about the solution besides of the graphical representation.","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"Here, we focus on the following data:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"integrals of the solution\nflux through parts of the boundary","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"Let us define the following reaction - diffusion system in a domain Omega:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\npartial_t u_1 - nabla cdot nabla u_1 + r(u_1 u_2) = f=10\npartial_t u_2 - nabla cdot nabla u_1 - r(u_1 u_2) = 0\nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"with boundary conditions u_2=0 on Gamma_2subsetpartialOmega and r(u_1u_2)=u_1 + 01 u_2","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"The source f creates species u_1 which reacts to u_2, u_2 then leaves the domain at boundary Gamma_2.","category":"page"},{"location":"examples/Example225_TestFunctions2D/#Stationary-problem","page":"225: Terminal flux calculation via test functions, nD","title":"Stationary problem","text":"","category":"section"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"For the stationary problem, we have the following flux balances derived from the equations and from Gauss theorem:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\nint_Omega r(u_1u_2) domega = int_Omega f domega \nint_Omega -r(u_1u_2) domega = int_Gamma_2 nabla u cdot vec n ds \nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"The volume integrals can be approximated based on the finite volume subdivision Omega=cup_iin mathcal N omega_i:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\nint_Omega r(u_1u_2) domega approx sum_iin mathcal N omega_i r(u_1iu_2i)\nint_Omega f domega approx sum_iin mathcal N omega_i f_i\nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"But what about  the boundary integral ?  Here, we use a  trick to cast the surface  integral to the  integral to  a volume integral  with the help of a test function:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"Let T(x) be the solution of the Laplace problem -nabla^2 T =0 in Omega and the boundary conditions","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\nT =0 quad textat Gamma_4\nT =1 quad textat Gamma_2\npartial_n T =0quad textat  Gamma_1Gamma_3\nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"Write vec j=-nabla u. and assume nablacdot vec j + r =f.","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\nint_Gamma_2 vec j cdot vec n ds=int_Gamma_2 Tvec j cdot vec n ds quad textdue to T=1 texton Gamma_2\n =int_partialOmega  Tvec j cdot vec n dsquad textdue to T=0 texton Gamma_4 quadvec jcdot vec n=0 texton Gamma_1 Gamma_3\n= int_Omega nabla cdot (T vec j) domega quad text(Gauss)\n= int_Omega nabla T cdot vec j domega + int_Omega T nablacdot j domega\n=  int_Omega nabla T cdot vec j domega + int_Omega T(f-r)dω\nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"and we approximate","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"beginaligned\nint_Omega nabla T cdot vec j domega approx sum_kl\nfracomega_kcapomega_lh_klg(u_k u_l) (T_k-T_l)\nendaligned","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"where the sum runs over pairs of neigboring control volumes.","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"The integrate method with a  test function parameter returns a value for each species, the sign convention assumes that species leaving the domain lead to negative values.","category":"page"},{"location":"examples/Example225_TestFunctions2D/#Transient-problem","page":"225: Terminal flux calculation via test functions, nD","title":"Transient problem","text":"","category":"section"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"The amount  of species created via  the source term (measured  in F) integrated  over time  should be  equal to  the sum  of the  amount of species left in  the domain at the  very end of the  evolution and the amount of species which left the domain:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"int_t_0^t_end int_Omega f domega dt= int_Omega (u_1+u_2)dω + int_t_0^t_end int_Gamma_2 nabla u_2 cdot vec n ds","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"Literature references:","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"H. Gajewski \"Analysis und Numerik von Ladungstransport in Halbleitern\", WIAS Berlin, Report No.6\nYoder, P. D., K. Gärtner, and W. Fichtner. \"A generalized Ramo–Shockley theorem for classical to quantum transport at arbitrary frequencies.\" Journal of Applied Physics 79.4 (1996): 1951-1954.\nP. Farrell, N. Rotundo, D. H. Doan, M. Kantner, J. Fuhrmann, and T. Koprucki, \"Numerical methods for drift-diffusion models\", in Handbook of optoelectronic device modeling and simulation: Lasers, modulators, photodetectors, solar cells, and numerical methods, vol. 2, J. Piprek, Ed. Boca Raton: CRC Press, 2017, pp. 733–771.","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"module Example225_TestFunctions2D\n\nusing VoronoiFVM, GridVisualize,ExtendableGrids\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse,dim=2,tend=5, dt=0.2)\n    n=[101,21,5]\n    X=collect(range(0.0,1,length=n[dim]))\n    if dim==1\n        grid=simplexgrid(X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[1]\n    elseif dim==2\n        grid=simplexgrid(X,X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[4]\n    elseif dim==3\n        grid=simplexgrid(X,X,X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[4]\n    end\n\n    function storage(f,u,node)\n        f.=u\n    end\n\n    function flux(f,_u,edge)\n\tu=unknowns(edge,_u)\n\tf[1]=u[1,1]-u[1,2]\n\tf[2]=u[2,1]-u[2,2]\n    end\n\n    r(u1,u2)= u1-0.1*u2\n\n    function reaction(f,u,node)\n\tf[1]= r(u[1],u[2])\n\tf[2]=-r(u[1],u[2])\n    end\n\n\n    function source(f,node)\n\tf[1]=1.0\n    end\n\n    physics=VoronoiFVM.Physics(num_species=2,\n\t                       flux=flux,\n\t                       storage=storage,\n\t                       reaction=reaction,\n\t                       source=source)\n\n    system=VoronoiFVM.System(grid,physics)\n    enable_species!(system,1,[1])\n    enable_species!(system,2,[1])\n    boundary_dirichlet!(system,2,2,0.0);\n\n\n    inival=unknowns(system,inival=0.0)\n\n    u=solve(inival,system)\n\n    vis=GridVisualizer(Plotter=Plotter,layout=(1,2),resolution=(600,300),fignumber=1)\n    scalarplot!(vis[1,1],grid,u[1,:],flimits=(0,1.5),title=\"u_1\")\n    scalarplot!(vis[1,2],grid,u[2,:],flimits=(0,1.5),title=\"u_2\",show=true)\n\n    \"\"\"\n        The `integrate` method of `VoronoiFVM`  provides a possibility to calculate\n        the volume integral of a function of a solution as described above.\n        It returns a `num_specie` x `num_regions` matrix of the integrals\n        of the function of the unknowns over the different subdomains (here, we have only one):\n    \"\"\"\n\n    \"\"\"\n        Amount of u_1 and u_2 in the domain aka integral over identity storage function:\n    \"\"\"\n    U=integrate(system,storage,u)\n\n    \"\"\"\n    Amount of species created by source term per unit time:\n    \"\"\"\n    F=integrate(system,(f,u,node)->source(f,node),u)\n\n    \"\"\"\n    Amount of  reaction per unit time:\n    \"\"\"\n    R=integrate(system,reaction,u)\n\n\n    tf=VoronoiFVM.TestFunctionFactory(system)\n    T=testfunction(tf,Γ_where_T_equal_0,Γ_where_T_equal_1)\n\n    I=integrate(system,T,u)\n\n\n    t0=0.0\n\n    control=fixed_timesteps!(VoronoiFVM.NewtonControl(),dt)\n\n    tsol=solve(inival,system,[t0,tend],control=control)\n\n\n    vis1=GridVisualizer(Plotter=Plotter,layout=(1,2),resolution=(600,300),fignumber=4)\n\n    for i=1:length(tsol)\n        sol=tsol[i]\n        scalarplot!(vis1[1,1],grid,sol[1,:],flimits=(0,1.5),clear=true)\n        scalarplot!(vis1[1,2],grid,sol[2,:],flimits=(0,1.5),show=true)\n    end\n\n    outflow_rate=Float64[]\n    for i=2:length(tsol)\n\tofr=integrate(system,T,tsol[i],tsol[i-1],tsol.t[i]-tsol.t[i-1])\n  \tpush!(outflow_rate,ofr[2])\n    end\n\n    vis2=GridVisualizer(Plotter=Plotter,layout=(1,1),resolution=(600,300),fignumber=2)\n    scalarplot!(vis2[1,1],[0,tend],-[I[2],I[2]],label=\"stationary\",clear=true)\n    scalarplot!(vis2[1,1],tsol.t[2:end],-outflow_rate,label=\"transient\",show=true)\n\n    all_outflow=0.0\n    for i=1:length(tsol)-1\n\tall_outflow-=outflow_rate[i]*(tsol.t[i+1]-tsol.t[i])\n    end\n\n    Uend=integrate(system,storage,tsol[end])\n    isapprox(F[1], R[1],rtol=1.0e-12)  ? true : return false\n    isapprox(I[1], 0.0, atol=1.0e-12)  ? true : return false\n    isapprox(R[2], I[2],rtol=1.0e-12)  ? true : return false\n    isapprox(F[1]*(tend-t0), ( Uend[1] + Uend[2] + all_outflow), rtol=1.0e-12) ? true : return false\nend\n\n\nfunction test()\n    main(dim=1, unknown_storage=:sparse )  ? true : return false\n    main(dim=1, unknown_storage=:dense  )  ? true : return false\n    main(dim=2, unknown_storage=:sparse )  ? true : return false\n    main(dim=2, unknown_storage=:dense  )  ? true : return false\n    main(dim=3, unknown_storage=:sparse )  ? true : return false\n    main(dim=3, unknown_storage=:dense  )  ? true : return false\nend\n\nend","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"","category":"page"},{"location":"examples/Example225_TestFunctions2D/","page":"225: Terminal flux calculation via test functions, nD","title":"225: Terminal flux calculation via test functions, nD","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example405_GenericOperator/#:-Generic-Operator:-1D-Nonlinear-Poisson-equation","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"(source code)","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"Solve the nonlinear Poisson equation","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"-nabla varepsilon nabla u + e^u-e^-u = f","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"in Omega=(01) with boundary condition u(0)=0 and u(1)=1 with","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"f(x)=\n    begincases\n    1x05\n    -1 x05\n    endcases","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"This stationary problem is an example of a nonlinear Poisson equation or Poisson-Boltzmann equation. Such equation occur e.g. in simulations of electrochemical systems and semicondutor devices.","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"module Example405_GenericOperator\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n)\n    X=collect(0:h:1)\n    grid=VoronoiFVM.Grid(X)\n\n    # A parameter which is \"passed\" to the flux function via scope\n    ϵ=1.0e-3\n\n    # This generic operator works on the full solution seen as linear vector, and indexing\n    # into it needs to be performed with the help of idx (defined below for a solution vector)\n    # Here, instead of the flux function we provide a \"generic operator\"\n    # which provides the stiffness part of the problem. Its sparsity is detected automatically\n    # using SparsityDetection.jl\n    function generic_operator!(f,u,sys)\n        f.=0.0\n        for i=1:length(X)-1\n            du=ϵ*(u[idx[1,i]]-u[idx[1,i+1]])/(X[i+1]-X[i])\n            f[idx[1,i]]+=du\n            f[idx[1,i+1]]-=du\n        end\n    end\n\n    # Source term\n    function source!(f,node)\n        if node[1]<=0.5\n            f[1]=1\n        else\n            f[1]=-1\n        end\n    end\n\n    # Reaction term\n    function reaction!(f,u,node)\n        f[1]=exp(u[1]) - exp(-u[1])\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        generic=generic_operator!,\n        source=source!,\n        reaction=reaction!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Set boundary conditions\n    boundary_dirichlet!(sys,1,1,0.0)\n    boundary_dirichlet!(sys,1,2,1.0)\n\n    # Create a solution array\n    inival=unknowns(sys,inival=0.5)\n    solution=unknowns(sys)\n\n    idx=unknown_indices(solution)\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n\n    # Stationary solution of the problem\n    solve!(solution,inival,sys, control=control)\n\n    scalarplot(grid,solution[1,:],title=\"Nonlinear Poisson\",Plotter=Plotter)\n    return sum(solution)\nend\n\nfunction test()\n    testval=1.5247901344230088\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"","category":"page"},{"location":"examples/Example405_GenericOperator/","page":"405: Generic Operator: 1D Nonlinear Poisson equation","title":"405: Generic Operator: 1D Nonlinear Poisson equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"system/#System","page":"System","title":"System","text":"","category":"section"},{"location":"system/#Types-and-Constants","page":"System","title":"Types and Constants","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\n    \"vfvm_abstractsystem.jl\",\n    \"vfvm_xgrid.jl\",\n    \"vfvm_densesolution.jl\",\n    \"vfvm_sparsesolution.jl\",\n    \"vfvm_transientsolution.jl\",\n    \"vfvm_densesystem.jl\",\n    \"vfvm_sparsesystem.jl\",\n    \"vfvm_geometryitems.jl\",\n    \"vfvm_solver.jl\",\n    \"vfvm_newtoncontrol.jl\", \n    \"vfvm_testfunctions.jl\"]\nOrder = [:type]","category":"page"},{"location":"system/#VoronoiFVM.AbstractSystem","page":"System","title":"VoronoiFVM.AbstractSystem","text":"abstract type AbstractSystem{Tv<:Number, Ti<:Integer, Tm<:Integer}\n\nAbstract type for finite volume system structure\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSolutionArray","page":"System","title":"VoronoiFVM.DenseSolutionArray","text":"const DenseSolutionArray=Matrix\n\nDense storage of solution\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSolutionArray","page":"System","title":"VoronoiFVM.SparseSolutionArray","text":"struct SparseSolutionArray{Tv, Ti} <: AbstractArray{Tv, 2}\n\nStruct holding solution information for SparseSystem. Solution is stored in a sparse matrix structure.\n\nThis class plays well with the abstract array interface.\n\nFields:\n\nnode_dof::SparseArrays.SparseMatrixCSC{Tv, Ti} where {Tv, Ti}\nSparse matrix holding actual data.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.AbstractTransientSolution","page":"System","title":"VoronoiFVM.AbstractTransientSolution","text":"abstract type AbstractTransientSolution{T, N, A, B} <: RecursiveArrayTools.AbstractDiffEqArray{T, N, A}\n\nAbstract type for transient solution\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.TransientSolution","page":"System","title":"VoronoiFVM.TransientSolution","text":"mutable struct TransientSolution{T, N, A, B} <: VoronoiFVM.AbstractTransientSolution{T, N, A, B}\n\nTransient solution structure\n\nFields\n\nu::Any\nVector of solutions\n\nt::Any\nVector of times\n\nInterface\n\nObject of this type adhere to the AbstractDiffEqArray  interface. For indexing and interpolation, see https://diffeq.sciml.ai/stable/basics/solution/.\n\nIn particular, a TransientSolution sol can be accessed as follows:\n\nsol[it] contains the solution for timestep i\nsol[ispec,:,it] contains the solution for component ispec at timestep i\nsol(t) returns a (linearly) interpolated solution value for t.\nsol.t[it] is the corresponding time\nsol[ispec,ix,it] refers to solution of component ispec at node ix at moment it\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.TransientSolution-Union{Tuple{T}, Tuple{Number, AbstractArray{T, N} where N}} where T","page":"System","title":"VoronoiFVM.TransientSolution","text":"TransientSolution(t0,inival;\n                  in_memory=true,\n                  keep_open=true,\n                  fname=tempname(pwd())*\".jld2\"\n\nConstructor of transient solution with initial value and inital time.\n\nin_memory: if true (default), data are kept in main memory, otherwise on disk (via JLD2)\nkeep_open: if true, disk file is not closed during the existence of the object\nfname: file name for the disk file\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.VectorOfDiskArrays-Union{Tuple{AbstractArray{T, N} where N}, Tuple{T}} where T","page":"System","title":"VoronoiFVM.VectorOfDiskArrays","text":"VectorOfDiskArrays(firstobj:AbstractArray;\n                   keep_open=true,\n                   fname= fname=tempname(pwd())*\".jld2\")\n\nConstructor of vector of arrays stored on disk (via JLD2).\n\nkeep_open: if true, disk file is not closed during the existence of the object\nfname: file name for the disk file\n\nThe disk file is automatically removed if the object is garbage collected.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.DenseSystem","page":"System","title":"VoronoiFVM.DenseSystem","text":"mutable struct DenseSystem{Tv, Ti, Tm} <: VoronoiFVM.AbstractSystem{Tv, Ti, Tm}\n\nStructure holding data for finite volume system solution. Information on species distribution is kept in dense matrices, and the solution array is of type Array{2}.\n\nUnlike in the SparseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns, and dummy  degrees of freedom where unknowns are not defined. Handling of the sparse matrix structures for the bookeeping of the unknowns has less overhead, but additional dummy equations are added to the system matrix.\n\ngrid::Any\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Matrix{Tv} where Tv\nArray of boundary values\n\nboundary_factors::Matrix{Tv} where Tv\nArray of boundary factors\n\nregion_species::Matrix{Int8}\nFull matrix containing species numbers for inner regions\n\nbregion_species::Matrix{Int8}\nFull matrix containing species numbers for boundary regions\n\nnode_dof::Matrix{Int8}\nFull matrix containing degree of freedom numbers for each node\n\nmatrix::ExtendableSparse.ExtendableSparseMatrix{Tv, Tm} where {Tv, Tm}\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::Matrix{Tv} where Tv\nSolution vector holding Newton update\n\nresidual::Matrix{Tv} where Tv\nSolution vector holding Newton residual\n\ncellnodefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for cell nodes\n\ncelledgefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for cell edges\n\nbfacenodefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for boundary nodes\n\ngeneric_matrix::SparseArrays.SparseMatrixCSC\nSparse matrix for generic operator handling\n\ngeneric_matrix_colors::Vector{T} where T\nSparse matrix colors for generic operator handling\n\nuhash::UInt64\nHash value of latest unknowns vector the assembly was called with\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem-Tuple{Any, VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.DenseSystem","text":"DenseSystem(grid::Any, physics::VoronoiFVM.Physics; matrixindextype) -> VoronoiFVM.DenseSystem{_A, _B, Int32} where {_A, _B}\n\n\nConstructor for DenseSystem.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.SparseSystem","page":"System","title":"VoronoiFVM.SparseSystem","text":"mutable struct SparseSystem{Tv, Ti, Tm} <: VoronoiFVM.AbstractSystem{Tv, Ti, Tm}\n\nStructure holding data for finite volume system solution.\n\nInformation on species distribution is kept in sparse matrices, and the solution array is of type SparseSolutionArray, i.e. effectively it is a sparse matrix.\n\nUnlike in the DenseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns. However, handling of the sparse matrix structures for the bookkeeping of the unknowns creates overhead.\n\ngrid::Any\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Matrix{Tv} where Tv\nArray of boundary values\n\nboundary_factors::Matrix{Tv} where Tv\nArray of boundary factors\n\nregion_species::SparseArrays.SparseMatrixCSC{Int8, Ti} where Ti\nSparse matrix containing species numbers for inner regions\n\nbregion_species::SparseArrays.SparseMatrixCSC{Int8, Ti} where Ti\nSparse matrix containing species numbers for boundary regions\n\nnode_dof::SparseArrays.SparseMatrixCSC{Int8, Tm} where Tm\nSparse matrix containing degree of freedom numbers for each node\n\nmatrix::ExtendableSparse.ExtendableSparseMatrix{Tv, Tm} where {Tv, Tm}\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::VoronoiFVM.SparseSolutionArray{Tv, Tm} where {Tv, Tm}\nSolution vector holding Newton update\n\nresidual::VoronoiFVM.SparseSolutionArray{Tv, Tm} where {Tv, Tm}\nSolution vector holding Newton residual\n\ncellnodefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for cell nodes\n\ncelledgefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for cell edges\n\nbfacenodefactors::Matrix{Tv} where Tv\nPrecomputed geometry factors for boundary nodes\n\ngeneric_matrix::SparseArrays.SparseMatrixCSC\nSparse matrix for generic operator handling\n\ngeneric_matrix_colors::Vector{T} where T\nSparse matrix colors for generic operator handling\n\nuhash::UInt64\nHash value of latest unknowns vector the assembly was called with\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem-Tuple{Any, VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.SparseSystem","text":"SparseSystem(grid::Any, physics::VoronoiFVM.Physics; matrixindextype) -> VoronoiFVM.SparseSystem{_A, _B, Int32} where {_A, _B}\n\n\nConstructor for SparseSystem.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.BNode","page":"System","title":"VoronoiFVM.BNode","text":"mutable struct BNode{Tv, Ti} <: VoronoiFVM.AbstractGeometryItem{Tv, Ti}\n\nStructure holding local boundary  node information.\n\nindex::Any\nIndex in grid\n\nregion::Any\nBoundary region number\n\nnspec::Any\nNumber of species defined in node\n\ncoord::Matrix{Tv} where Tv\nGrid coordinates\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.Edge","page":"System","title":"VoronoiFVM.Edge","text":"mutable struct Edge{Tv, Ti} <: VoronoiFVM.AbstractGeometryItem{Tv, Ti}\n\nStructure holding local edge information.\n\nindex::Any\nIndex in grid\n\nnode::Vector{Ti} where Ti\nIndex\n\nregion::Any\nInner region number corresponding to edge\n\nnspec::Any\nNumber of species defined in edge\n\nicell::Any\nNumber of discretization cell the edge is invoked from\n\ncoord::Matrix{Tv} where Tv\nGrid coordinates\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.MatrixUnknowns","page":"System","title":"VoronoiFVM.MatrixUnknowns","text":"struct MatrixUnknowns{T} <: AbstractArray{T, 2}\n\nWrapper struct for viewing unknowns passed to flux as matrix\n\nu::Vector{T} where T\nn1::Int64\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.Node","page":"System","title":"VoronoiFVM.Node","text":"mutable struct Node{Tv, Ti} <: VoronoiFVM.AbstractGeometryItem{Tv, Ti}\n\nStructure holding local node information.\n\nindex::Any\nIndex in grid\n\nregion::Any\nInner region number\n\nnspec::Any\nNumber of species defined in node\n\nicell::Any\nNumber of discretization cell the node is invoked from\n\ncoord::Matrix{Tv} where Tv\nGrid coordinates\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.VectorUnknowns","page":"System","title":"VoronoiFVM.VectorUnknowns","text":"struct VectorUnknowns{T} <: AbstractArray{T, 1}\n\nWrapper struct for viewing unknowns passed to callback functions\n\nu::Vector{T} where T\nn::Int64\noffset::Int64\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.AssemblyError","page":"System","title":"VoronoiFVM.AssemblyError","text":"struct AssemblyError <: Exception\n\nException thrown if error occured during assembly (e.g. domain error)\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.ConvergenceError","page":"System","title":"VoronoiFVM.ConvergenceError","text":"struct ConvergenceError <: Exception\n\nException thrown if Newton's method convergence fails.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.EmbeddingError","page":"System","title":"VoronoiFVM.EmbeddingError","text":"struct EmbeddingError <: Exception\n\nException thrown if embedding fails\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.FactorizationError","page":"System","title":"VoronoiFVM.FactorizationError","text":"struct FactorizationError <: Exception\n\nException thrown if error occured during factorization.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl","page":"System","title":"VoronoiFVM.NewtonControl","text":"mutable struct NewtonControl\n\nControl parameters for Newton method.\n\nNewton's method solves F(u)=0 by the iterative procedure u_i+1=u_i - d_i F(u_i)^-1F(u_i) starting with some inital value u_0, where d_i is the damping. \n\ntol_absolute::Float64\nTolerance (in terms of norm of Newton update): terminate if Delta_i=u_i+1-u_i_infty  tol_absolute.\nDefault value: 1.0e-10.\n\ntol_relative::Float64\nTolerance (relative to the first residual): terminate if Delta_iDelta_0 tol_relative.\nDefault value: 1.0e-10.\n\ntol_round::Float64\nTolerance for roundoff error detection: terminate if   u_i+1_1 - u_i_1 u_i_1 tol_round occured max_round times in a row.\nDefault value: 1.0e-10.\n\ntol_mono::Float64\nTolerance for monotonicity test: terminat with error if Delta_iDelta_i-1 1/tol_mono.\nDefault value: 1.0e-3\n\ndamp_initial::Float64\nInitial damping parameter d_0.\nDefault value: 1.0.\nTo handle convergence problems, set this to a value less than 1.\n\ndamp_growth::Float64\nDamping parameter growth factor: d_i+1=min(d_icdot max_growth 1)\nDefault value: 1.2\nGenerally it should be set to a value between 1 and 2.\n\nmax_iterations::Int32\nMaximum number of iterations.\nDefault value: 100\n\nmax_lureuse::Int32\nMaximum number of reuses of lu factorization. It this value is 0, linear systems are solved by a sparse direct solver, and it's LU factorization is called in every Newton step.\nOtherwise, a BICGstab iterative method is used for linear system solution with an LU factorization as preconditioner which is updated only every max_lureuse Newton step.\nDefault value: 0.\n\nmax_round::Int32\nMaximum number of consecutive iterations within roundoff error tolerance\nDefault value: 1000 (effectively switching of this criterion).\n\ntol_linear::Float64\nTolerance of iterative linear solver.\nDefault value: 1.0e-4.\n\nverbose::Bool\nVerbosity flag\nDefault value: false.\n\nhandle_exceptions::Bool\nHandle exceptions in embed! and  evolve! methods. If true, exceptions in Newton solves are catched, the embedding resp. time step is lowered, and solution is retried.\nDefault value: false\n\nΔp::Float64\nInitial parameter step for embed! method.\nDefault value: 1.0\n\nΔp_max::Float64\nMaximal parameter step for embed! method\nDefault value: 1.0\n\nΔp_min::Float64\nMinimal parameter step for embed! method.\nDefault value: 1.0e-3\n\nΔt::Float64\nTime step for evolve! method.\nDefault value: 0.1\n\nΔt_max::Float64\nMaximal time step for evolve! method.\nDefault value: 1\n\nΔt_min::Float64\nMinimal time step for evolve! method.\nDefault value: 1.0e-3\n\nΔt_grow::Float64\nMaximal step size growth for  evolve! method.\nDefault: 1.2\n\nΔu_opt::Float64\nOptimal size of update for  evolve! method. The algorithm keeps this value approximately constant.\nDefault: 0.1\n\nforce_first_step::Bool\nforce first timestep\n\nedge_cutoff::Float64\nEdge cutoff for rectangular triangles.\nDefault value: 0.0.\n\numfpack_pivot_tolerance::Float64\nPivot tolerance for umfpack\nDefault value: 0.1.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl-Tuple{Any}","page":"System","title":"VoronoiFVM.NewtonControl","text":"NewtonControl(this::Any) -> Any\n\n\nDefault constructor\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.TestFunctionFactory","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"mutable struct TestFunctionFactory{Tv}\n\nData structure containing DenseSystem used to calculate test functions for boundary flux calculations.\n\nsystem::VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Tv, Ti<:Integer, Tm<:Integer}\nOriginal system\n\ntfsystem::VoronoiFVM.DenseSystem\nTest function system\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.TestFunctionFactory-Union{Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Ti<:Integer, Tm<:Integer}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"Constructor for TestFunctionFactory from System\n\n\n\n\n\n","category":"method"},{"location":"system/","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\n    \"vfvm_abstractsystem.jl\",\n    \"vfvm_xgrid.jl\",\n    \"vfvm_densesolution.jl\",\n    \"vfvm_sparsesolution.jl\",\n    \"vfvm_transientsolution.jl\",\n    \"vfvm_densesystem.jl\",\n    \"vfvm_sparsesystem.jl\",\n    \"vfvm_geometryitems.jl\",\n    \"vfvm_solver.jl\",\n    \"vfvm_newtoncontrol.jl\", \n    \"vfvm_testfunctions.jl\"]\nOrder = [:constant]","category":"page"},{"location":"system/#VoronoiFVM.Dirichlet","page":"System","title":"VoronoiFVM.Dirichlet","text":"Constant to be used as boundary condition factor  to mark Dirichlet boundary conditons.    \n\n\n\n\n\n","category":"constant"},{"location":"system/#Methods","page":"System","title":"Methods","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\n    \"vfvm_abstractsystem.jl\",\n    \"vfvm_xgrid.jl\",\n    \"vfvm_densesolution.jl\",\n    \"vfvm_sparsesolution.jl\",\n    \"vfvm_transientsolution.jl\",\n    \"vfvm_densesystem.jl\",\n    \"vfvm_sparsesystem.jl\",\n    \"vfvm_geometryitems.jl\",\n    \"vfvm_solver.jl\",\n    \"vfvm_newtoncontrol.jl\", \n    \"vfvm_testfunctions.jl\"]\nOrder = [:function]","category":"page"},{"location":"system/#VoronoiFVM.System-Tuple{Any, VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.System","text":"System(grid::Any, physics::VoronoiFVM.Physics; unknown_storage, matrixindextype) -> Any\n\n\nCreate Finite Volume System. \n\ngrid: 1D/2D/3D discretization grid\nphysics: Physics struct containing node and edge callbacks\nunknown_storage: string or symbol:\n:dense :  solution vector is an  nspecies x nnodes  dense matrix\n:sparse :  solution vector is an nspecies x nnodes  sparse matrix\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_dirichlet!-Tuple{VoronoiFVM.AbstractSystem, Integer, Integer, Any}","page":"System","title":"VoronoiFVM.boundary_dirichlet!","text":"boundary_dirichlet!(this::VoronoiFVM.AbstractSystem, ispec::Integer, ibc::Integer, val::Any) -> Any\n\n\nSet Dirichlet boundary conditon for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_neumann!-Tuple{VoronoiFVM.AbstractSystem, Integer, Integer, Any}","page":"System","title":"VoronoiFVM.boundary_neumann!","text":"boundary_neumann!(this::VoronoiFVM.AbstractSystem, ispec::Integer, ibc::Integer, val::Any) -> Any\n\n\nSet Neumann boundary conditon for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_robin!-Tuple{VoronoiFVM.AbstractSystem, Integer, Integer, Any, Any}","page":"System","title":"VoronoiFVM.boundary_robin!","text":"boundary_robin!(this::VoronoiFVM.AbstractSystem, ispec::Integer, ibc::Integer, fac::Any, val::Any) -> Any\n\n\nSet Robin boundary conditon for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.data-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.data","text":"data(this::VoronoiFVM.AbstractSystem) -> Any\n\n\nRetrieve user data record.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_boundary_species!-Tuple{VoronoiFVM.AbstractSystem, Integer, AbstractVector{T} where T}","page":"System","title":"VoronoiFVM.enable_boundary_species!","text":"enable_boundary_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, bregions::AbstractVector{T} where T)\n\n\nAdd species to a list of boundary regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_species!-Tuple{VoronoiFVM.AbstractSystem, Integer, AbstractVector{T} where T}","page":"System","title":"VoronoiFVM.enable_species!","text":"enable_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, regions::AbstractVector{T} where T)\n\n\nAdd species to a list of bulk regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_boundary_species-Tuple{VoronoiFVM.AbstractSystem, Integer}","page":"System","title":"VoronoiFVM.is_boundary_species","text":"is_boundary_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds to boundary species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_bulk_species-Tuple{VoronoiFVM.AbstractSystem, Integer}","page":"System","title":"VoronoiFVM.is_bulk_species","text":"is_bulk_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds bulk species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.isdof-Tuple{VoronoiFVM.AbstractSystem, Any, Any}","page":"System","title":"VoronoiFVM.isdof","text":"isdof(this::VoronoiFVM.AbstractSystem, ispec::Any, inode::Any) -> Bool\n\n\nCheck if degree of freedom is defined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Tuple{AbstractArray}","page":"System","title":"VoronoiFVM.num_species","text":"num_species(a::AbstractArray) -> Any\n\n\nNumber of species (size of first dimension) of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.num_species","text":"num_species(this::VoronoiFVM.AbstractSystem) -> Any\n\n\nNumber of species in system\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.update_grid!-Union{Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"System","title":"VoronoiFVM.update_grid!","text":"Update grid (e.g. after rescaling of coordinates).\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.Grid","page":"System","title":"VoronoiFVM.Grid","text":"Grid=ExtendableGrids.simplexgrid\n\nRe-Export of ExtendableGrids.simplexgrid\n\n\n\n\n\n","category":"function"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{Matrix{Tv}, Integer, Integer}} where Tv","page":"System","title":"VoronoiFVM.dof","text":"dof(a::Array{Tv, 2}, ispec::Integer, K::Integer) -> Any\n\n\nGet degree of freedom number\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Union{Tuple{Matrix{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.values","text":"Array of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.copy-Union{Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"System","title":"Base.copy","text":"Create a copy of solution array\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.getindex-Tuple{VoronoiFVM.SparseSolutionArray, Integer, Integer}","page":"System","title":"Base.getindex","text":"getindex(a::VoronoiFVM.SparseSolutionArray, ispec::Integer, inode::Integer) -> Any\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.setindex!-Tuple{VoronoiFVM.SparseSolutionArray, Any, Integer, Integer}","page":"System","title":"Base.setindex!","text":"setindex!(a::VoronoiFVM.SparseSolutionArray, v::Any, ispec::Integer, inode::Integer) -> Union{Nothing, VoronoiFVM.SparseSolutionArray}\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.similar-Union{Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"System","title":"Base.similar","text":"Create a similar unintialized solution array\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.size-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"Base.size","text":"size(a::VoronoiFVM.SparseSolutionArray) -> Tuple{Int64, Int64}\n\n\nReturn size of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}, Integer, Integer}} where {Tv, Ti}","page":"System","title":"VoronoiFVM.dof","text":"dof(a, i, j)\n\n\nGet number of degree of freedom. Return 0 if species is not defined in node.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.getdof-Tuple{VoronoiFVM.SparseSolutionArray, Integer}","page":"System","title":"VoronoiFVM.getdof","text":"getdof(a::VoronoiFVM.SparseSolutionArray, i::Integer) -> Any\n\n\nReturn  value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.setdof!-Tuple{VoronoiFVM.SparseSolutionArray, Any, Integer}","page":"System","title":"VoronoiFVM.setdof!","text":"setdof!(a::VoronoiFVM.SparseSolutionArray, v::Any, i::Integer) -> Any\n\n\nSet value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"VoronoiFVM.values","text":"values(a::VoronoiFVM.SparseSolutionArray) -> Vector{Tv} where Tv\n\n\nArray of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.reshape-Union{Tuple{Tv}, Tuple{Tu}, Tuple{AbstractVector{Tu}, VoronoiFVM.DenseSystem{Tv, Ti, Tm} where {Ti, Tm}}} where {Tu, Tv}","page":"System","title":"Base.reshape","text":"reshape(v, sys)\n\n\nReshape vector to fit as solution to system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.DenseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.DenseSystem) -> Int64\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{Tv}, Tuple{Type, VoronoiFVM.DenseSystem{Tv, Ti, Tm} where {Ti, Tm}}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(Tu::Type, sys::VoronoiFVM.DenseSystem{Tv, Ti, Tm} where {Ti, Tm}; inival) -> Any\n\n\nCreate a solution vector for dense system. If inival is not specified, the entries of the returned vector are undefined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{VoronoiFVM.DenseSystem{Tv, Ti, Tm} where {Ti, Tm}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for dense system. If inival is not specified, the entries of the returned vector are undefined.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.reshape-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{AbstractVector{Tu}, VoronoiFVM.SparseSystem{Tv, Ti, Tm}}} where {Tu, Tv, Ti, Tm}","page":"System","title":"Base.reshape","text":"reshape(v, sys)\n\n\nReshape vector to fit as solution to system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.SparseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.SparseSystem) -> Any\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{Type, VoronoiFVM.SparseSystem{Tv, Ti, Tm}}} where {Tv, Ti, Tm}","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(Tu, sys; inival)\n\n\nCreate a solution vector for sparse system with given type. If inival is not specified, the entries of the returned vector are undefined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{VoronoiFVM.SparseSystem{Tv, Ti, Tm}}, Tuple{Tm}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti, Tm}","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for sparse system.  The entries of the returned vector are undefined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.meas-Tuple{VoronoiFVM.Edge}","page":"System","title":"VoronoiFVM.meas","text":"meas(edge::VoronoiFVM.Edge) -> Any\n\n\nCalculate the length of an edge. \n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Tuple{VoronoiFVM.Edge}","page":"System","title":"VoronoiFVM.num_species","text":"num_species(edge::VoronoiFVM.Edge) -> Any\n\n\nReturn number of species for edge\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Tuple{VoronoiFVM.BNode, Any}","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(node::VoronoiFVM.BNode, u::Any) -> Any\n\n\nConstruct vector unknowns on bnode\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Tuple{VoronoiFVM.Node, Any}","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(node::VoronoiFVM.Node, u::Any) -> Any\n\n\nConstruct vector unknowns on node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{T}, Tuple{VoronoiFVM.Edge, Vector{T}, Any}} where T","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(edge::VoronoiFVM.Edge, u::Array{T, 1}, i::Any) -> VoronoiFVM.VectorUnknowns{_A} where _A\n\n\nConstruct vector unknowns on edge.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{T}, Tuple{VoronoiFVM.Edge, Vector{T}}} where T","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(edge::VoronoiFVM.Edge, u::Array{T, 1}) -> VoronoiFVM.MatrixUnknowns{_A} where _A\n\n\nConstruct matrix of unknowns from edge - these can be used in flux functions with the v0.7.x and v0.8.x syntax to acces data.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewK-Tuple{VoronoiFVM.Edge, Any}","page":"System","title":"VoronoiFVM.viewK","text":"viewK(edge::VoronoiFVM.Edge, u::Any) -> VoronoiFVM.VectorUnknowns{_A} where _A\n\n\nSolution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewL-Tuple{VoronoiFVM.Edge, Any}","page":"System","title":"VoronoiFVM.viewL","text":"viewL(edge::VoronoiFVM.Edge, u::Any) -> VoronoiFVM.VectorUnknowns{_A} where _A\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.embed!-Union{Tuple{Tv}, Tuple{AbstractMatrix{Tv}, AbstractMatrix{Tv}, VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Ti<:Integer, Tm<:Integer}}} where Tv","page":"System","title":"VoronoiFVM.embed!","text":"function embed!(solution, inival, system; \n                control=NewtonControl(),\n                pre=function(sol,p) end,\n                post=function(sol,p) end\n)\n\nSolve stationary problem via parameter embedding, calling solve! for increasing values of the parameter p from interval (0,1). The user is responsible for the interpretation of the parameter. The optional pre() callback can be used to communicate its value to the system. The optional post() callback method can be used to perform various postprocessing steps.\n\nIf control.handle_error is true, solve!  throws an error, and stepsize control.Δp is lowered, and solve! is called again with a smaller  parameter value. If control.Δp<control.Δp_min, embed! is aborted with error.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.eval_and_assemble-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer, AbstractMatrix{Tv}, AbstractMatrix{Tv}, AbstractMatrix{Tv}, Tv}} where {Tv, Ti}","page":"System","title":"VoronoiFVM.eval_and_assemble","text":"eval_and_assemble(system, U, UOld, F, tstep; edge_cutoff)\n\n\nMain assembly method.\n\nEvaluate solution with result in right hand side F and  assemble matrix into system.matrix.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.evolve!-Union{Tuple{Tv}, Tuple{AbstractMatrix{Tv}, AbstractMatrix{Tv}, VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Ti<:Integer, Tm<:Integer}, AbstractVector{T} where T}} where Tv","page":"System","title":"VoronoiFVM.evolve!","text":"function evolve!(solution, inival, system, times;\n                 control=NewtonControl(), \n                 pre=function(sol,t) end,   \n                 post=function(sol,oldsol, t, Δt) end,\n                 sample=function(sol,t) end,\n                 delta=(u,v,t, Δt)->norm(u-v,Inf)\n)\n\nUse implicit Euler method  + damped   Newton's method  to  solve time dependent problem. Time step control is performed according to the data in control.  All times in times are reached exactly.\n\nCallbacks:\n\npre is invoked before each time step\npost  is invoked after each time step\nsample is called for all times in times[2:end].\n\ndelta is  used to control the time step.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm}, Function, AbstractMatrix{Tu}}} where {Tu, Tv, Ti, Tm}","page":"System","title":"VoronoiFVM.integrate","text":"integrate(system,F,U; boundary=false)    \n\nIntegrate node function (same signature as reaction or storage)  F of  solution vector over domain or boundary  The result contains the integral for each species separately.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.solve!-Union{Tuple{Tv}, Tuple{AbstractMatrix{Tv}, AbstractMatrix{Tv}, VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Ti<:Integer, Tm<:Integer}}} where Tv","page":"System","title":"VoronoiFVM.solve!","text":"solve!(solution, inival, system; control=NewtonControl(),tstep=Inf, log=false)\n\nPerform solution of stationary problem(if tstep==Inf) or one step of the implicit Euler method using Newton's method with inival as initial value. The method writes into solution. \n\nIt returns solution or, if log==true, a tuple of solution and a vector containing the residual history of Newton's method.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.solve-Tuple{AbstractMatrix{T} where T, VoronoiFVM.AbstractSystem, AbstractVector{T} where T}","page":"System","title":"VoronoiFVM.solve","text":"function solve(inival, system, times;\n               control=NewtonControl(), \n               pre=function(sol,t) end,   \n               post=function(sol,oldsol, t, Δt) end,\n               sample=function(sol,t) end,\n               delta=(u,v,t, Δt)->norm(u-v,Inf),\n               store_all=true,\n               in_memory=true\n)\n\nUse implicit Euler method  + damped   Newton's method  to  solve time dependent problem. Time step control is performed according to the data in control.  All times in times are reached exactly.\n\nCallbacks:\n\npre is invoked before each time step\npost  is invoked after each time step\nsample is called for all times in times[2:end].\n\ndelta is  used to control the time step.\n\nIf store_all==true, all timestep solutions are stored. Otherwise, only solutions for the elements of times are stored.\n\nReturns a transient solution object sol containing stored solutions, see TransientSolution\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.solve-Union{Tuple{Tv}, Tuple{AbstractMatrix{Tv}, VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where {Ti<:Integer, Tm<:Integer}}} where Tv","page":"System","title":"VoronoiFVM.solve","text":"solve(inival, system; control=NewtonControl(), tstep=Inf, log=false)\n\nPerform solution of stationary problem(if tstep==Inf) or one step of the implicit Euler method using Newton's method with inival as initial value. The method writes into solution. \n\nIt returns a solution array or, if log==true, a tuple of solution and a vector containing the residual history of Newton's method.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.value","page":"System","title":"VoronoiFVM.value","text":"Extract value from dual number. Use to debug physics callbacks. Re-exported from ForwardDiff.jl\n\n\n\n\n\n","category":"function"},{"location":"system/#VoronoiFVM.fixed_timesteps!-Tuple{Any, Any}","page":"System","title":"VoronoiFVM.fixed_timesteps!","text":"timesteps!(control,Δt; grow=1.0)\n\nModify control data such that the time steps are fixed to a geometric sequence such that Δtnew=Δtold*grow\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer, Vector{Tv}, AbstractMatrix{Tv}, AbstractMatrix{Tv}, Real}} where {Tv, Ti}","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U, Uold, tstep)\n\n\nCalculate test function integral for transient solution.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer, Vector{Tv}, AbstractMatrix{Tv}}} where {Tv, Ti}","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U)\n\n\nCalculate test function integral for steady state solution.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate_stdy-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer, Vector{Tv}, AbstractMatrix{Tu}}} where {Tu, Tv, Ti}","page":"System","title":"VoronoiFVM.integrate_stdy","text":"Steady state part of test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate_tran-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer, Vector{Tv}, AbstractMatrix{Tu}}} where {Tu, Tv, Ti}","page":"System","title":"VoronoiFVM.integrate_tran","text":"integrate_tran(this, tf, U)\n\n\nCalculate transient part of test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.testfunction-Union{Tuple{Tv}, Tuple{VoronoiFVM.TestFunctionFactory{Tv}, Any, Any}} where Tv","page":"System","title":"VoronoiFVM.testfunction","text":"testfunction(factory::VoronoiFVM.TestFunctionFactory{Tv}, bc0::Any, bc1::Any) -> Any\n\n\nCreate testfunction which has Dirichlet zero boundary conditions  for boundary regions in bc0 and Dirichlet one boundary conditions  for boundary regions in bc1.\n\n\n\n\n\n","category":"method"},{"location":"examples/Example205_NonlinearPoisson2D/#:-2D-Nonlinear-Poisson-equation","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"(source code)","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"module Example205_NonlinearPoisson2D\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\n\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse)\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n    eps=1.0e-2\n\n    physics=VoronoiFVM.Physics(\n        num_species=1,\n        reaction=function(f,u,node)\n        f[1]=u[1]^2\n        end,\n\n        flux=function(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=eps*(u[1,1]^2-u[1,2]^2)\n        end,\n\n        source=function(f,node)\n        x1=node[1]-0.5\n        x2=node[2]-0.5\n        f[1]=exp(-20.0*(x1^2+x2^2))\n        end,\n\n        storage=function(f,u,node)\n        f[1]=u[1]\n        end)\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n    enable_species!(sys,1,[1])\n\n    boundary_dirichlet!(sys,1,2,0.1)\n    boundary_dirichlet!(sys,1,4,0.1)\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0.5\n\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=10\n    tstep=0.01\n    time=0.0\n    u15=0\n    p=GridVisualizer(Plotter=Plotter)\n    while time<1.0\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        u15=U[15]\n        inival.=U\n\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n\n        scalarplot!(p[1,1],grid,U[1,:],Plotter=Plotter,clear=true,show=true)\n        tstep*=1.0\n    end\n    return u15\nend\n\nfunction test()\n    main(unknown_storage=:sparse) ≈ 0.3554284760906605 &&\n        main(unknown_storage=:dense) ≈ 0.3554284760906605\nend\nend","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/#:-1D-Reaction-Diffusion-equation-with-two-species","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"","category":"section"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"(source code)","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"Solve the nonlinear coupled reaction diffusion problem","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"-nabla (001+2u_2)nabla u_1 + u_1u_2= 00001(001+x)","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"-nabla (001+2u_1)nabla u_2 - u_1u_2 = 00001(101-x)","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"in Omega=(01) with boundary condition u_1(0)=1, u_2(0)=0 and u_1(1)=1, u_2(1)=1.","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"module Example110_ReactionDiffusion1D_TwoSpecies\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=100,Plotter=nothing,verbose=false,unknown_storage=:sparse)\n    h=1/n\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n\n    eps=[1.0,1.0]\n\n    physics=VoronoiFVM.Physics(num_species=2,\n\n                               reaction=function(f,u,node)\n                               f[1]=u[1]*u[2]\n                               f[2]=-u[1]*u[2]\n                               end,\n\n                               flux=function(f,u0,edge)\n                               u=unknowns(edge,u0)\n\n                               nspecies=2\n                               f[1]=eps[1]*(u[1,1]-u[1,2])*(0.01+u[2,1]+u[2,2])\n                               f[2]=eps[2]*(u[2,1]-u[2,2])*(0.01+u[1,1]+u[1,2])\n                               end,\n\n                               source=function(f,node)\n                               f[1]=1.0e-4*(0.01+node[1])\n                               f[2]=1.0e-4*(0.01+1.0-node[1])\n                               end,\n\n                               storage=function(f,u,node)\n                               f[1]=u[1]\n                               f[2]=u[2]\n                               end\n                               )\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    boundary_dirichlet!(sys,1,1,1.0)\n    boundary_dirichlet!(sys,1,2,0.0)\n\n    boundary_dirichlet!(sys,2,1,1.0)\n    boundary_dirichlet!(sys,2,2,0.0)\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.damp_initial=0.1\n    u5=0\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    for xeps in [1.0,0.5,0.25,0.1,0.05,0.025,0.01]\n        eps=[xeps,xeps]\n        solve!(U,inival,sys,control=control)\n        inival.=U\n        scalarplot!(p[1,1],grid,U[1,:],clear=true,title=\"U1, eps=$(xeps)\")\n        scalarplot!(p[2,1],grid,U[2,:],clear=true,title=\"U2, eps=$(xeps)\",reveal=true)\n        sleep(0.2)\n        u5=U[5]\n    end\n    return u5\nend\n\nfunction test()\n    testval=0.7117546972922056\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\nend","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"","category":"page"},{"location":"examples/Example110_ReactionDiffusion1D_TwoSpecies/","page":"110: 1D Reaction Diffusion equation with two species","title":"110: 1D Reaction Diffusion equation with two species","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#:-2D-Nonlinear-Poisson-with-boundary-reaction","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"","category":"section"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"(source code)","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"module Example215_NonlinearPoisson2D_BoundaryReaction\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse,tend=100)\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n\n    eps=1.0e-2\n    physics=VoronoiFVM.Physics(\n        num_species=2,\n        breaction=function(f,u,node)\n        if  node.region==2\n            f[1]=1*(u[1]-u[2])\n            f[2]=1*(u[2]-u[1])\n        else\n            f[1]=0\n            f[2]=0\n        end\n        end,\n\n    flux=function(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=eps*(u[1,1]-u[1,2])\n        f[2]=eps*(u[2,1]-u[2,2])\n    end,\n\n\n    storage=function(f,u,node)\n        f[1]=u[1]\n        f[2]=u[2]\n    end)\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival[1,:].=map((x,y)->exp(-5.0*((x-0.5)^2+(y-0.5)^2)),grid)\n    inival[2,:].=0\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u25=0\n\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        I=integrate(sys,physics.storage,U)\n        Uall=sum(I)\n        tstep*=1.2\n        istep=istep+1\n        u25=U[25]\n        scalarplot!(p[1,1],grid,U[1,:],title=@sprintf(\"U1: %.3g U1+U2:%8.3g\",I[1,1],Uall),flimits=(0,1))\n        scalarplot!(p[2,1],grid,U[2,:],title=@sprintf(\"U2: %.3g\",I[2,1]),flimits=(0,1))\n        reveal(p)\n    end\n    return u25\nend\n\nfunction test()\n    testval=0.2760603343272377\n    main(unknown_storage=:sparse) ≈ testval &&\n        main(unknown_storage=:dense) ≈ testval\nend\nend","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/TestDiffEq/#Comparison-with-DifferentialEquations.jl","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"","category":"section"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"(source code)","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"Solve the nonlinear diffusion equation","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"partial_t u -Delta u^m = 0","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"in Omega=(-11) with homogeneous Neumann boundary conditons using the implicit Euler method.","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"This equation is also called  \"porous medium equation\". The Barenblatt solution is an exact solution of this problem which for m>1 has a finite support. We initialize this problem with the exact solution for t=t_0=0001.","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"(see Barenblatt, G. I. \"On nonsteady motions of gas and fluid in porous medium.\" Appl. Math. and Mech.(PMM) 16.1 (1952): 67-78.)","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"Here, we compare the implicit Euler approach in VoronoiFVM with the ODE solvers in DifferentialEquations.jl and demonstrate the possibility to use VoronoiFVM to define differential operators compatible with its ODEFunction interface.","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"Note that this example requires  PyPlot and DifferentialEquations to be installed.","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"module TestDiffEq\n\nusing VoronoiFVM\nusing DifferentialEquations\nusing LinearAlgebra\nusing Printf\nusing PyPlot\n\nimport Base:push!\n\n\n\n\n\nfunction barenblatt(x,t,m)\n    tx=t^(-1.0/(m+1.0))\n    xx=x*tx\n    xx=xx*xx\n    xx=1- xx*(m-1)/(2.0*m*(m+1));\n    if xx<0.0\n        xx=0.0\n    end\n    return tx*xx^(1.0/(m-1.0))\nend\n\n\nfunction create_porous_medium_problem(n,m,unknown_storage)\n    h=1.0/convert(Float64,n/2)\n    X=collect(-1:h:1)\n    grid=VoronoiFVM.Grid(X)\n\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=u[1,1]^m-u[1,2]^m\n    end\n\n    storage!(f,u,node)= f[1]=u[1]\n\n    physics=VoronoiFVM.Physics(flux=flux!,storage=storage!)\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n    enable_species!(sys,1,[1])\n    sys,X\nend\n\n\nfunction run_vfvm(;n=20,m=2,t0=0.001, tend=0.01,tstep=1.0e-6,unknown_storage=:dense)\n\n    sys,X=create_porous_medium_problem(n,m,unknown_storage)\n\n    inival=unknowns(sys)\n    inival[1,:].=map(x->barenblatt(x,t0,m),X)\n\n    solution=unknowns(sys)\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=false\n    control.Δt=tstep\n    control.Δu_opt=0.05\n    control.Δt_min=tstep\n\n    times=collect(t0:t0:tend)\n    times=[t0,tend]\n    sol=VoronoiFVM.solve(inival,sys,times,control=control,store_all=true)\n    err=norm(sol[1,:,end]-map(x->barenblatt(x,tend,m),X))\n    sol,X,err\nend\n\n\n\nfunction run_diffeq(;n=20,m=2, t0=0.001,tend=0.01, unknown_storage=:dense,solver=nothing)\n    sys,X=create_porous_medium_problem(n,m,unknown_storage)\n    inival=unknowns(sys)\n    inival[1,:].=map(x->barenblatt(x,t0,m),X)\n    tspan = (t0,tend)\n    sol=VoronoiFVM.solve(DifferentialEquations,inival,sys,tspan,solver=solver)\n    err=norm(sol[1,:,end]-map(x->barenblatt(x,tend,m),X))\n    sol, X,err\nend\n\n\nfunction main(;m=2,n=20, solver=nothing, unknown_storage=:dense)\n    function plotsol(sol,X)\n        f=sol[1,:,:]'\n        contourf(X,sol.t,f,0:0.1:10,cmap=:summer)\n        contour(X,sol.t,f,0:1:10,colors=:black)\n    end\n\n    clf()\n    subplot(121)\n\n    t=@elapsed begin\n        sol,X,err=run_vfvm(m=m,n=n, unknown_storage=unknown_storage)\n    end\n    title(@sprintf(\"VoronoiFVM: %.0f ms e=%.2e\",t*1000,err))\n    plotsol(sol,X)\n\n    subplot(122)\n    t=@elapsed begin\n        sol,X,err=run_diffeq(m=m,n=n,solver=solver, unknown_storage=unknown_storage)\n    end\n    plotsol(sol,X)\n    title(@sprintf(\"DifferentialEq: %.0f ms, e=%.2e\",t*1000,err))\n\n    gcf().set_size_inches(8,4)\n    gcf()\nend\nend","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"","category":"page"},{"location":"examples/TestDiffEq/","page":"Comparison with DifferentialEquations.jl","title":"Comparison with DifferentialEquations.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"allindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"allindex/#Types-and-Constructors","page":"Index","title":"Types and Constructors","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:type]","category":"page"},{"location":"allindex/#Constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:constant]","category":"page"},{"location":"allindex/#Methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:function]","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/#:-2D-Nonlinear-Poisson-with-reaction","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"","category":"section"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"(source code)","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"module Example210_NonlinearPoisson2D_Reaction\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n    grid=VoronoiFVM.Grid(X,Y)\n    data = (eps=1.0e-2, k=1.0)\n\n    function reaction!(f,u,node,data)\n        f[1]=data.k*(u[1]-u[2])\n        f[2]=data.k*(u[2]-u[1])\n    end\n\n    function flux!(f,u0,edge,data)\n        u=unknowns(edge,u0)\n        f[1]=data.eps*(u[1,1]-u[1,2])\n        f[2]=data.eps*(u[2,1]-u[2,2])\n    end\n\n    function source!(f,node,data)\n        x1=node[1]-0.5\n        x2=node[2]-0.5\n        f[1]=exp(-20*(x1^2+x2^2))\n    end\n\n    function storage!(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n\n\n    physics=VoronoiFVM.Physics(num_species=2,\n                               data=data,\n                               flux=flux!,\n                               storage=storage!,\n                               reaction=reaction!,\n                               source=source!)\n\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0.0\n\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u15=0\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    while time<1\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        u15=U[15]\n        tstep*=1.0\n        istep=istep+1\n        scalarplot!(p[1,1],grid,U[1,:],clear=true)\n        scalarplot!(p[2,1],grid,U[2,:],show=true)\n    end\n    return u15\nend\n\nfunction test()\n    main(unknown_storage=:sparse) ≈ 0.014566189535134827 &&\n        main(unknown_storage=:dense) ≈ 0.014566189535134827\nend\nend","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"plot/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"In order to avoid drawing in of heavy dependencies for VoronoiFVM, the plot methods for grids and grid functions defined in this package have as their first argument the module of the plotting package used.","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"Currently, PyPlot and Plots are supported. Similar schemes in the future might work for Makie and other packages.","category":"page"},{"location":"plot/","page":"Plotting","title":"Plotting","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_plot.jl\"]\nOrder = [:function]","category":"page"},{"location":"examples/Example226_BoundaryIntegral/#:-Terminal-flux-calculation-via-test-functions,-nD,-boundary-reaction","page":"226: Terminal flux calculation via test functions, nD, boundary reaction","title":"226: Terminal flux calculation via test functions, nD, boundary reaction","text":"","category":"section"},{"location":"examples/Example226_BoundaryIntegral/","page":"226: Terminal flux calculation via test functions, nD, boundary reaction","title":"226: Terminal flux calculation via test functions, nD, boundary reaction","text":"(source code)","category":"page"},{"location":"examples/Example226_BoundaryIntegral/","page":"226: Terminal flux calculation via test functions, nD, boundary reaction","title":"226: Terminal flux calculation via test functions, nD, boundary reaction","text":"module Example226_BoundaryIntegral\n\nusing VoronoiFVM, GridVisualize,ExtendableGrids\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse,dim=2)\n    n=[101,21,5]\n    X=collect(range(0.0,1,length=n[dim]))\n    if dim==1\n        grid=simplexgrid(X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[1]\n    elseif dim==2\n        grid=simplexgrid(X,X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[4]\n    elseif dim==3\n        grid=simplexgrid(X,X,X)\n        Γ_where_T_equal_1=[2]\n        Γ_where_T_equal_0=[4]\n    end\n\n    function storage(f,u,node)\n        f.=u\n    end\n\n    function flux(f,_u,edge)\n\tu=unknowns(edge,_u)\n\tf[1]=u[1,1]-u[1,2]\n    end\n\n\n    function breaction(f,u,node)\n        if node.region==Γ_where_T_equal_1[1]\n            f[1]= u[1]^2\n        end\n    end\n\n    physics=VoronoiFVM.Physics(num_species=1,\n\t                       flux=flux,\n\t                       storage=storage,\n\t                       breaction=breaction)\n\n    system=VoronoiFVM.System(grid,physics)\n    enable_species!(system,1,[1])\n    boundary_dirichlet!(system,1,Γ_where_T_equal_0[1],1.0);\n    inival=unknowns(system,inival=0.0)\n\n    U=solve(inival,system)\n\n    tf=VoronoiFVM.TestFunctionFactory(system)\n    T=testfunction(tf,Γ_where_T_equal_0,Γ_where_T_equal_1)\n\n    scalarplot(grid,U[1,:],Plotter=Plotter,zplane=0.50001)\n    I=integrate(system,T,U)\n    B=integrate(system,breaction,U; boundary=true)\n    isapprox(-I[1], B[Γ_where_T_equal_1[1]],rtol=1.0e-12)\nend\n\n\nfunction test()\n    main(dim=1, unknown_storage=:sparse )  ? true : return false\n    main(dim=1, unknown_storage=:dense  )  ? true : return false\n    main(dim=2, unknown_storage=:sparse )  ? true : return false\n    main(dim=2, unknown_storage=:dense  )  ? true : return false\n    main(dim=3, unknown_storage=:sparse )  ? true : return false\n    main(dim=3, unknown_storage=:dense  )  ? true : return false\nend\n\nend","category":"page"},{"location":"examples/Example226_BoundaryIntegral/","page":"226: Terminal flux calculation via test functions, nD, boundary reaction","title":"226: Terminal flux calculation via test functions, nD, boundary reaction","text":"","category":"page"},{"location":"examples/Example226_BoundaryIntegral/","page":"226: Terminal flux calculation via test functions, nD, boundary reaction","title":"226: Terminal flux calculation via test functions, nD, boundary reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example120_ThreeRegions1D/#:-Differing-species-sets-in-regions,-1D","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"","category":"section"},{"location":"examples/Example120_ThreeRegions1D/","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"(source code)","category":"page"},{"location":"examples/Example120_ThreeRegions1D/","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"module Example120_ThreeRegions1D\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\n\n\nfunction main(;n=30,Plotter=nothing,plot_grid=false, verbose=false,unknown_storage=:sparse,tend=10)\n    h=3.0/(n-1)\n    X=collect(0:h:3.0)\n    grid=VoronoiFVM.Grid(X)\n    cellmask!(grid,[0.0],[1.0],1)\n    cellmask!(grid,[1.0],[2.1],2)\n    cellmask!(grid,[1.9],[3.0],3)\n\n    subgrid1=subgrid(grid,[1])\n    subgrid2=subgrid(grid,[1,2,3])\n    subgrid3=subgrid(grid,[3])\n\n    if plot_grid\n        plotgrid(grid,Plotter=Plotter)\n        return\n    end\n\n    eps=[1,1,1]\n    k=[1,1,1]\n\n    physics=VoronoiFVM.Physics(\n    num_species=3,\n    reaction=function(f,u,node)\n        if node.region==1\n            f[1]=k[1]*u[1]\n            f[2]=-k[1]*u[1]\n        elseif node.region==3\n            f[2]=k[3]*u[2]\n            f[3]=-k[3]*u[2]\n        else\n            f[1]=0\n        end\n    end,\n\n        flux=function(f,u0,edge)\n            u=unknowns(edge,u0)\n\n        if edge.region==1\n            f[1]=eps[1]*(u[1,1]-u[1,2])\n            f[2]=eps[2]*(u[2,1]-u[2,2])\n        elseif edge.region==2\n            f[2]=eps[2]*(u[2,1]-u[2,2])\n        elseif edge.region==3\n            f[2]=eps[2]*(u[2,1]-u[2,2])\n            f[3]=eps[3]*(u[3,1]-u[3,2])\n        end\n    end,\n\n    source=function(f,node)\n        if node.region==1\n           f[1]=1.0e-4*(3.0-node[1])\n        end\n    end,\n\n    storage=function(f,u,node)\n        f.=u\n    end\n    )\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1,2,3])\n    enable_species!(sys,3,[3])\n\n    boundary_dirichlet!(sys,3,2,0.0)\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    tstep=0.01\n    time=0.0\n    istep=0\n    testval=0\n    p=GridVisualizer(Plotter=Plotter,layout=(1,1))\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        tstep*=1.1\n        istep=istep+1\n        testval=U[2,5]\n\n        U1=view(U[1,:],subgrid1)\n        U2=view(U[2,:],subgrid2)\n        U3=view(U[3,:],subgrid3)\n\n        scalarplot!(p[1,1],subgrid1, U1,label=\"spec1\", color=(0.5,0,0),xlimits=(0,3),flimits=(0,1e-3),\n                  title=@sprintf(\"three regions t=%.3g\",time))\n        scalarplot!(p[1,1],subgrid2, U2,label=\"spec2\", color=(0.0,0.5,0),clear=false)\n        scalarplot!(p[1,1],subgrid3, U3,label=\"spec3\", color=(0.0,0.0,0.5),clear=false,show=true)\n    end\n    return testval\nend\n\nfunction test()\n    testval=0.0005954993329548969\n    main(unknown_storage=:sparse) ≈ testval &&\n        main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example120_ThreeRegions1D/","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"","category":"page"},{"location":"examples/Example120_ThreeRegions1D/","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#:-1D-Nonlinear-Diffusion-equation","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"","category":"section"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"(source code)","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"Solve the nonlinear diffusion equation","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"partial_t u -Delta u^m = 0","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"in Omega=(-11) with homogeneous Neumann boundary condtions using the implicit Euler method.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"This equation is also called  \"porous medium equation\". The Barenblatt solution is an exact solution of this problem which for m>1 has a finite support. We initialize this problem with the exact solution for t=t_0=0001.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"(see Barenblatt, G. I. \"On nonsteady motions of gas and fluid in porous medium.\" Appl. Math. and Mech.(PMM) 16.1 (1952): 67-78.)","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"module Example106_NonlinearDiffusion1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction barenblatt(x,t,m)\n    tx=t^(-1.0/(m+1.0))\n    xx=x*tx\n    xx=xx*xx\n    xx=1- xx*(m-1)/(2.0*m*(m+1));\n    if xx<0.0\n        xx=0.0\n    end\n    return tx*xx^(1.0/(m-1.0))\nend\n\n\nfunction main(;n=20,m=2,Plotter=nothing,verbose=false, unknown_storage=:sparse,tend=0.01,tstep=0.0001,DiffEq=nothing)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n/2)\n    X=collect(-1:h:1)\n    grid=VoronoiFVM.Grid(X)\n\n    # Flux function which describes the flux\n    # between neigboring control volumes\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=u[1,1]^m-u[1,2]^m\n    end\n\n    # Storage term\n    function storage!(f,u,node)\n        f[1]=u[1]\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        storage=storage!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n\n    # Create a solution array\n    inival=unknowns(sys)\n    t0=0.001\n\n    # Broadcast the initial value\n    inival[1,:].=map(x->barenblatt(x,t0,m),X)\n\n\n    # Create solver control info for constant time step size\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.Δt_min=tstep\n    control.Δt_max=tstep\n    control.Δt=tstep\n    control.Δu_opt=1\n\n    if isnothing(DiffEq)\n        tsol=solve(inival,sys,[t0,tend],control=control)\n    else\n        tsol=solve(DiffEq,inival,sys,[t0,tend])\n    end\n\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1),fast=true)\n    for i=1:length(tsol)\n        time=tsol.t[i]\n        scalarplot!(p[1,1],grid,tsol[1,:,i],title=@sprintf(\"numerical, t=%.3g\",time))\n        scalarplot!(p[2,1],grid,map(x->barenblatt(x,time,m),grid),title=@sprintf(\"exact, t=%.3g\",time))\n        reveal(p)\n    end\n    return sum(tsol[end])\nend\n\n\nfunction test()\n    testval=46.66666666647518\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example301_Laplace3D/#:-3D-Laplace-equation","page":"301: 3D Laplace equation","title":"301: 3D Laplace equation","text":"","category":"section"},{"location":"examples/Example301_Laplace3D/","page":"301: 3D Laplace equation","title":"301: 3D Laplace equation","text":"(source code)","category":"page"},{"location":"examples/Example301_Laplace3D/","page":"301: 3D Laplace equation","title":"301: 3D Laplace equation","text":"module Example301_Laplace3D\n\nusing VoronoiFVM,ExtendableGrids\nusing GridVisualize\n\n\n# Flux function which describes the flux\n# between neigboring control volumes\nfunction g!(f,u0,edge)\n    u=unknowns(edge,u0)\n    f[1]=u[1,1]-u[1,2]\nend\n\n\nfunction main(;Plotter=nothing)\n    nspecies=1\n    ispec=1\n    X=collect(0:0.2:1)\n    grid=VoronoiFVM.Grid(X,X,X)\n    physics=VoronoiFVM.Physics(num_species=nspecies,flux=g!)\n    sys=VoronoiFVM.System(grid,physics)\n    enable_species!(sys,ispec,[1])\n    boundary_dirichlet!(sys,ispec,5,0.0)\n    boundary_dirichlet!(sys,ispec,6,1.0)\n    inival=unknowns(sys,inival=0)\n    solution=unknowns(sys)\n    solve!(solution,inival,sys)\n    scalarplot(grid,solution[1,:],Plotter=Plotter,zplane=0.5, flevel=0.5)\n    return solution[43]\nend\n\n# Called by unit test\n\nfunction test()\n    main() ≈ 0.2\nend\n\nend","category":"page"},{"location":"examples/Example301_Laplace3D/","page":"301: 3D Laplace equation","title":"301: 3D Laplace equation","text":"","category":"page"},{"location":"examples/Example301_Laplace3D/","page":"301: 3D Laplace equation","title":"301: 3D Laplace equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/#:-1D-heterogeneous-catalysis","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"","category":"section"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"(source code)","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"Let Omega=(01), Gamma_1=0, Gamma_2=1 Regard a system of three species: ABC and let u_A=A, u_B=B and u_C=C be their corresponding concentrations.","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"Species A and B exist in the interior of the domain, species C lives a the boundary Gamma_1.  We assume a heterogeneous reaction scheme where A reacts to C and C reacts to B:","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"beginaligned\n      A leftrightarrow C\n      C leftrightarrow B\nendaligned","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"with reaction constants k_AC^pm and k_{BC}^\\pm$.","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"In Omega, both A and B are transported through diffusion:","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"beginaligned\npartial_t u_B - nablacdot D_A nabla u_A  = f_A\npartial_t u_B - nablacdot D_B nabla u_B  = 0\nendaligned","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"Here, f(x) is a source term creating A. On Gamma_2, we set boundary conditions","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"beginaligned\nD_A nabla u_A  = 0\nu_B=0\nendaligned","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"describing no normal flux for A and zero concentration of B. On Gamma_1, we use the mass action law to describe the boundary reaction and the evolution of the boundary concentration C. We assume that there is a limited amount of surface sites S for species C, so in fact A has to react with a free surface site in order to become C which reflected by the factor 1-u_C. The same is true for B.","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"beginaligned\nR_AC(u_A u_C)=k_AC^+ u_A(1-u_C) - k_AC^-u_C\nR_BC(u_C u_B)=k_BC^+ u_B(1-u_C) - k_BC^-u_C\n- D_A nabla u_A  + S R_AC(u_A u_C) =0 \n- D_B nabla u_B  + S R_BC(u_B u_C) =0 \npartial_t C  - R_AC(u_A u_C) - R_BC(u_B u_C) =0\nendaligned","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"module Example115_HeterogeneousCatalysis1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false,tend=1, unknown_storage=:sparse)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    N=length(X)\n\n    grid=VoronoiFVM.Grid(X)\n    # By default, \\Gamma_1 at X[1] and \\Gamma_2 is at X[end]\n\n    # Species numbers\n    iA=1\n    iB=2\n    iC=3\n\n\n    # Diffusion flux for species A and B\n    D_A=1.0\n    D_B=1.0e-2\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[iA]=D_A*(u[iA,1]-u[iA,2])\n        f[iB]=D_B*(u[iB,1]-u[iB,2])\n    end\n\n    # Storage term of species A and B\n    function storage!(f,u,node)\n        f[iA]=u[iA]\n        f[iB]=u[iB]\n    end\n\n    # Source term for species a around 0.5\n    function source!(f,node)\n        x1=node[1]-0.5\n        f[iA]=exp(-100*x1^2)\n    end\n\n    # Reaction constants (p = + , m = -)\n    # Choosen to prefer path A-> C -> B\n    # More over, A reacts faster than to C than C to B\n    # leading to \"catalyst poisoning\", i.e. C taking up most of the\n    # available catalyst sites\n    kp_AC=100.0\n    km_AC=1.0\n\n    kp_BC=0.1\n    km_BC=1.0\n\n    S=0.01\n\n    R_AC(u_A, u_C)=kp_AC*u_A*(1-u_C) - km_AC*u_C\n    R_BC(u_B, u_C)=kp_BC*u_B*(1-u_C) - km_BC*u_C\n\n    function breaction!(f,u,node)\n        if  node.region==1\n            f[iA]=S*R_AC(u[iA], u[iC])\n            f[iB]=S*R_BC(u[iB], u[iC])\n            f[iC]=-R_BC(u[iB], u[iC])-R_AC(u[iA], u[iC])\n        end\n    end\n\n    # This is for the term \\partial_t u_C at the boundary\n    function bstorage!(f,u,node)\n        if  node.region==1\n            f[iC]=u[iC]\n        end\n    end\n\n    physics=VoronoiFVM.Physics(\n        num_species=3,\n        breaction=breaction!,\n        bstorage=bstorage!,\n        flux=flux!,\n        storage=storage!,\n        source=source!\n    )\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    # Enable species in bulk resp\n    enable_species!(sys,iA,[1])\n    enable_species!(sys,iB,[1])\n\n    # Enable surface species\n    enable_boundary_species!(sys,iC,[1])\n\n    # Set Dirichlet bc for species B on \\Gamma_2\n    boundary_dirichlet!(sys,iB,2,0.0)\n\n    # Initial values\n    inival=unknowns(sys)\n    inival.=0.0\n    U=unknowns(sys)\n\n    tstep=0.01\n    time=0.0\n\n    # Data to store surface concentration vs time\n    T=zeros(0)\n    u_C=zeros(0)\n\n    p=GridVisualizer(Plotter=Plotter,layout=(3,1))\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        # Record  boundary species\n        push!(T,time)\n        push!(u_C,U[iC,1])\n\n        scalarplot!(p[1,1],grid,U[iA,:],clear=true,title=@sprintf(\"[A]: (%.3f,%.3f)\",extrema(U[iA,:])...))\n        scalarplot!(p[2,1],grid,U[iB,:],clear=true,title=@sprintf(\"[B]: (%.3f,%.3f)\",extrema(U[iA,:])...))\n        scalarplot!(p[3,1],simplexgrid(copy(T)),copy(u_C),clear=true,title=@sprintf(\"[C]: %.3f\",u_C[end]),show=true)\n        yield()\n    end\n    return U[iC,1]\nend\n\nfunction test()\n    testval=0.87544440641274\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"","category":"page"},{"location":"examples/Example115_HeterogeneousCatalysis1D/","page":"115: 1D heterogeneous catalysis","title":"115: 1D heterogeneous catalysis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example150_Impedance1D/#:-Impedance-calculation","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"","category":"section"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"(source code)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Impedance calculation for","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"C ut - (D ux)_x + Ru = 0   in (0,1)      u(0,t)=1 + exp(iωt)      u(1,t)=0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Measurement: I(t)= D u_x(1,t)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Steady state:","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"(D u0x)x + Ru0 = 0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"u0(0,t)=1    u0(1,t)=0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Small signal ansatz for ω","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"u(x,t)= u0(x)+ ua(x) exp(iωt)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"iωC ua - (D uax)x + R u_a =0      ua(0)=1      ua(1)=0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"module Example150_Impedance1D\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;nref=0,Plotter=nothing,verbose=false, unknown_storage=:sparse)\n\n    L=1.0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create array which is refined close to 0","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    h0=0.1/2.0^nref\n    h1=0.5/2.0^nref\n    X=VoronoiFVM.geomspace(0.0,L,h0,h1)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create discretitzation grid","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    grid=VoronoiFVM.Grid(X)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create and fill data","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    data = (R=1, D=1, C=2)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Declare constitutive functions","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    flux=function(f,u0,edge,data)\n        u=unknowns(edge,u0)\n        f[1]=data.D*(u[1,1]-u[1,2])\n    end\n\n    storage=function(f,u,node,data)\n        f[1]=data.C*u[1]\n    end\n\n    reaction=function(f,u,node,data)\n        f[1]=data.R*u[1]\n    end","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create physics struct","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    physics=VoronoiFVM.Physics(data=data,\n                               flux=flux,\n                               storage=storage,\n                               reaction=reaction\n                               )","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create discrete system and enabe species","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n    enable_species!(sys,1,[1])","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create test functions for current measurement","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    excited_bc=1\n    excited_bcval=1.0\n    excited_spec=1\n\n\n    factory=VoronoiFVM.TestFunctionFactory(sys)\n    measurement_testfunction=testfunction(factory,[1],[2])\n\n\n    boundary_dirichlet!(sys,excited_spec,excited_bc,excited_bcval)\n    boundary_dirichlet!(sys,1,2,0.0)\n\n\n    inival=unknowns(sys)\n    steadystate=unknowns(sys)\n    inival.=0.0\n    solve!(steadystate,inival,sys)\n\n    function meas_stdy(meas,U)\n        u=reshape(U,sys)\n        meas[1]=VoronoiFVM.integrate_stdy(sys,measurement_testfunction,u)[1]\n        nothing\n    end\n\n    function meas_tran(meas,U)\n        u=reshape(U,sys)\n        meas[1]=VoronoiFVM.integrate_tran(sys,measurement_testfunction,u)[1]\n        nothing\n    end\n\n\n    dmeas_stdy=measurement_derivative(sys,meas_stdy,steadystate)\n    dmeas_tran=measurement_derivative(sys,meas_tran,steadystate)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create Impeadancs system from steady state","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    excited_spec=1\n    excited_bc=1\n    isys=VoronoiFVM.ImpedanceSystem(sys,steadystate,excited_spec, excited_bc)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Prepare recording of impedance results","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allomega=zeros(0)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"for calculated data","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allI0=zeros(Complex{Float64},0)\n    allIL=zeros(Complex{Float64},0)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"for exact data","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allIx0=zeros(Complex{Float64},0)\n    allIxL=zeros(Complex{Float64},0)\n\n    ω0=0.5\n    ω1=1.0e4\n    ω=ω0\n\n    testval=0.0\n    UZ=unknowns(isys)\n    while ω<ω1\n\n        iω=1im*ω","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"solve impedance system","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        solve!(UZ,isys,ω)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"calculate aproximate solution obtain measurement in frequency  domain","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        IL=freqdomain_impedance(isys,ω,steadystate,excited_spec,excited_bc,excited_bcval,dmeas_stdy, dmeas_tran)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"record approximate solution","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        push!(allomega, ω)\n        push!(allIL,IL)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"record exact solution","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        z=sqrt(iω*data.C/data.D+data.R/data.D);\n        eplus=exp(z*L);\n        eminus=exp(-z*L);\n        IxL=2.0*data.D*z/(eminus-eplus);\n        push!(allIxL,IxL)","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"increase omega","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        ω=ω*1.2\n\n    end\n\n    p=GridVisualizer(Plotter=Plotter)\n    scalarplot!(p,real(allIL),imag(allIL),label=\"calc\",color=:red)\n    scalarplot!(p,real(allIxL),imag(allIxL),label=\"exact\",show=true,clear=false,color=:blue)\n    return  imag(allIL[5])\nend\n\nfunction test()\n    main(unknown_storage=:dense) ≈ 0.23106605162049176 &&  main(unknown_storage=:sparse) ≈ 0.23106605162049176\nend\n\n\nend","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"","category":"page"},{"location":"examples/Example150_Impedance1D/","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/#:-1D-Poisson-with-point-charge","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"","category":"section"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"(source code)","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"Solve a Poisson equation","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"- Delta u = 0","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"in Omega=(-11) with a point charge Q at x=0.","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"module Example121_PoissonPointCharge1D\n\nusing Printf\n\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;nref=0,Plotter=nothing, verbose=false, unknown_storage=:sparse, brea=false)\n\n    # Create grid in (-1,1) refined around 0\n    hmax=0.2/2.0^nref\n    hmin=0.05/2.0^nref\n    X1=geomspace(-1.0,0.0, hmax,hmin)\n    X2=geomspace(0.0,1.0, hmin,hmax)\n    X=glue(X1,X2)\n    grid=VoronoiFVM.Grid(X)\n\n    # Edit default region numbers:\n    #   additional boundary region 3 at 0.0\n    bfacemask!(grid, [0.0],[0.0],3)\n    # Material 1 left of 0\n    cellmask!(grid, [-1.0],[0.0],1)\n    # Material 2 right of 0\n    cellmask!(grid, [0.0],[1.0],2)\n\n\n    Q=0.0\n\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=u[1,1]-u[1,2]\n    end\n    function storage!(f,u,node)\n        f[1]=u[1]\n    end\n\n    # Define boundary reaction defining charge\n    # Note that the term  is written on  the left hand side, therefore the - sign\n    function breaction!(f,u,node)\n        if node.region==3\n            f[1]=-Q\n        end\n    end\n\n   # Create physics\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        storage=storage!,\n        breaction=breaction!\n    )\n\n    # Create system\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=:dense)\n\n\n    #  put potential into both regions\n    enable_species!(sys,1,[1,2])\n\n    # Set boundary conditions\n\n    boundary_dirichlet!(sys,1,1,1.0)\n    boundary_dirichlet!(sys,1,2,0.0)\n\n    # Create a solution array\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    if ispyplot(Plotter)\n        Plotter.clf()\n    end\n\n    # Solve and plot for several values of charge\n    for q in [0.1,0.2,0.4,0.8,1.6]\n\n        if brea\n            # Charge in reaction term\n            Q=q\n        else\n            # Charge as boundary condition\n            sys.boundary_values[1,3]=q\n        end\n        solve!(U,inival,sys, control=control)\n\n        # Plot data\n        if ispyplot(Plotter)\n            Plotter.grid()\n            coord=grid[Coordinates]\n            Plotter.plot(coord[1,:],U[1,:],label=@sprintf(\"Q=%.2f\",q))\n            Plotter.xlabel(\"x\")\n            Plotter.ylabel(\"\\$\\\\phi\\$\")\n            Plotter.legend(loc=\"upper right\")\n            Plotter.pause(1.0e-10)\n        end\n    end\n    return sum(U)\nend\n\nfunction test()\n    main()≈20.254591679579015\nend\nend","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"","category":"page"},{"location":"examples/Example121_PoissonPointCharge1D/","page":"121: 1D Poisson with point charge","title":"121: 1D Poisson with point charge","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/#:-Unipolar-degenerate-drift-diffusion","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"","category":"section"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"(source code)","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"See: C. Cancès, C. Chainais-Hillairet, J. Fuhrmann, and B. Gaudeul, \"A numerical-analysis-focused comparison of several finite volume schemes for a unipolar degenerate drift-diffusion model\" IMA Journal of Numerical Analysis, vol. 41, no. 1, pp. 271–314, 2021.","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"Available from https://doi.org/10.1093/imanum/draa002, the preprint is on arxiv1907.11126.","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"The problem consists of a Poisson equation for the electrostatic potential phi:","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"-nabla varepsilon nabla phi = z(2c-1)","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"and a degenerate drift-diffusion equation of the transport of a charged species c:","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"partial_t u  - nablacdot left(nabla c  + c nabla (phi - log (1-c) )right)","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"In particular, the paper, among others, investigates the \"sedan\" flux discretization which is able to handle the degeneracy coming from the log (1-c) term. The earliest reference to this scheme we found in the source code of the SEDAN III semiconductor device simulator.","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"module Example160_UnipolarDriftDiffusion1D\n\nusing Printf\n\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nmutable struct Data\n    eps::Float64\n    z::Float64\n    ic::Int32\n    iphi::Int32\n    Data()=new()\nend\n\n\n\n\nfunction classflux!(f,u0,edge,data)\n    u=unknowns(edge,u0)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.eps*(u[iphi,1]-u[iphi,2])\n    bp,bm=fbernoulli_pm(u[iphi,1]-u[iphi,2])\n    f[ic]=bm*u[ic,1]-bp*u[ic,2]\nend\n\n\nfunction storage!(f,u,node,data)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=0\n    f[ic]=u[ic]\nend\n\nfunction reaction!(f,u,node,data)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.z*(1-2*u[ic])\n    f[ic]=0\nend\n\nfunction sedanflux!(f,u0,edge,data)\n    u=unknowns(edge,u0)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.eps*(u[iphi,1]-u[iphi,2])\n    mu1=-log(1-u[ic,1])\n    mu2=-log(1-u[ic,2])\n    bp,bm=fbernoulli_pm(data.z*2*(u[iphi,1]-u[iphi,2])+(mu1-mu2))\n    f[ic]=bm*u[ic,1]-bp*u[ic,2]\nend\n\n\nfunction main(;n=20,Plotter=nothing,dlcap=false,verbose=false,unknown_storage=:sparse,DiffEq=nothing)\n\n    h=1.0/convert(Float64,n)\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n    data=Data()\n    data.eps=1.0e-3\n    data.z=-1\n    data.iphi=1\n    data.ic=2\n\n    ic=data.ic\n    iphi=data.iphi\n\n\n    physics=VoronoiFVM.Physics(data=data,\n                               num_species=2,\n                               flux=sedanflux!,\n                               reaction=reaction!,\n                               storage=storage!\n                               )\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    boundary_dirichlet!(sys,iphi,1,5.0)\n    boundary_dirichlet!(sys,iphi,2,0.0)\n    boundary_dirichlet!(sys,ic,2,0.5)\n\n    inival=unknowns(sys)\n    @views inival[iphi,:].=2\n    @views inival[ic,:].=0.5\n\n\n    if !dlcap\n        # Create solver control info for constant time step size\n        tstep=1.0e-3\n        control=VoronoiFVM.NewtonControl()\n        control.verbose=verbose\n        control.Δt_min=tstep\n        control.Δt=tstep\n        control.Δt_grow=1.2\n        control.Δt_max=0.1\n        control.Δu_opt=100\n        control.damp_initial=0.5\n        if isnothing(DiffEq)\n            tsol=solve(inival,sys,[0.0,10],control=control)\n        else # does not work yet...\n            tsol=solve(DiffEq,inival,sys,[0.0,10],\n                       initializealg=DiffEq.NoInit(),\n                       dt=tstep)\n        end\n        vis=GridVisualizer(Plotter=Plotter,layout=(1,1),fast=true)\n        for log10t=-4:0.01:0\n            time=10^(log10t)\n            sol=tsol(time)\n            scalarplot!(vis[1,1],grid,sol[iphi,:],label=\"ϕ\",title=@sprintf(\"time=%.3g\",time),flimits=(0,5))\n            scalarplot!(vis[1,1],grid,sol[ic,:],label=\"c\",flimits=(0,5))\n            reveal(vis)\n        end\n        return sum(tsol[end])\n\n    else  # Calculate double layer capacitance\n        U=unknowns(sys)\n        control=VoronoiFVM.NewtonControl()\n        control.damp_initial=1.0e-5\n        delta=1.0e-4\n        @views inival[iphi,:].=0\n        @views inival[ic,:].=0.5\n        sys.boundary_values[iphi,1]=0\n\n        dphi=1.0e-1\n        phimax=5\n        delta=1.0e-4\n        vplus=zeros(0)\n        cdlplus=zeros(0)\n        vminus=zeros(0)\n        cdlminus=zeros(0)\n        cdl=0\n        vis=GridVisualizer(Plotter=Plotter,layout=(1,1),fast=true)\n        for dir in [1,-1]\n            phi=0.0\n            while phi<phimax\n                sys.boundary_values[iphi,1]=dir*phi\n                solve!(U,inival,sys,control=control)\n                inival.=U\n                Q=integrate(sys,physics.reaction,U)\n                sys.boundary_values[iphi,1]=dir*phi+delta\n                solve!(U,inival,sys,control=control)\n                inival.=U\n\n                scalarplot!(vis[1,1],grid,U[iphi,:],label=\"ϕ\",title=@sprintf(\"Δϕ=%.3g\",phi),flimits=(-5,5))\n                scalarplot!(vis[1,1],grid,U[ic,:],label=\"c\",flimits=(0,5))\n                reveal(vis)\n\n                Qdelta=integrate(sys,physics.reaction,U)\n                cdl=(Qdelta[iphi]-Q[iphi])/delta\n                if dir==1\n                    push!(vplus,dir*phi)\n                    push!(cdlplus,cdl)\n                else\n                    push!(vminus,dir*phi)\n                    push!(cdlminus,cdl)\n                end\n                phi+=dphi\n            end\n        end\n\n        scalarplot!(vis[1,1],vplus,cdlplus,color=:green,clear=true,flimits=(0,0.05))\n        scalarplot!(vis[1,1],vminus,cdlminus,color=:green,clear=false,show=true)\n        return cdl\n    end\nend\n\nfunction test()\n\n    isapprox(main(unknown_storage=:sparse,dlcap=false),18.721369939561963,rtol=1.0e-5)&&\n    isapprox(main(unknown_storage=:sparse,dlcap=true),0.010759276468375045,rtol=1.0e-5)&&\n    isapprox(main(unknown_storage=:dense,dlcap=false),18.721369939561963,rtol=1.0e-5)&&\n    isapprox(main(unknown_storage=:dense,dlcap=true),0.010759276468375045,rtol=1.0e-5)\n\nend\nend","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/#:-1D-Stationary-convection-diffusion-equation","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"","category":"section"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"(source code)","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"Solve the equation","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"-nabla ( D nabla u - v u) = 0","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"in Omega=(01) with boundary condition u(0)=0 and u(1)=1. v could be e.g. the velocity of a moving medium or the gradient of an electric field.","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"This is a convection dominant second order boundary value problem which obeys a local and a global maximum principle: the solution which is bounded by the values at the boundary and has no local extrema in the interior. If v is large compared to D, a boundary layer is observed.","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"The maximum principle of the solution can only be guaranteed it the discretization is performed accordingly: the flux function must monotonically increase in the first argument and monotonically decrease in the second argument.","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"The example describes three possible ways to define the flux function and demonstrates the impact on the qualitative properties of the solution.","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"module Example102_StationaryConvectionDiffusion1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\n# Central difference flux. The velocity term is discretized using the\n# average of the solution in the endpoints of the grid. If the local Peclet\n# number v*h/D>1, the monotonicity property is lost.  Grid refinement\n# can fix this situation by decreasing $h$.\n\nfunction central_flux!(f,u0,edge,data)\n    u=unknowns(edge,u0)\n    f_diff=data.D*(u[1,1]-u[1,2])\n    vh=project(edge,data.v)\n    f[1]=f_diff+vh*(u[1,1]+u[1,2])/2\nend\n\n# The simple upwind flux corrects the monotonicity properties essentially\n# via brute force and loses one order of convergence for small $h$ compared\n# to the central flux.\n\nfunction upwind_flux!(f,u0,edge,data)\n    u=unknowns(edge,u0)\n    fdiff=data.D*(u[1,]-u[1,2])\n    vh=project(edge,data.v)\n    if vh>0\n        f[1]=fdiff+vh*u[1,1]\n    else\n        f[1]=fdiff+vh*u[1,2]\n    end\nend\n\n# The exponential fitting flux has the proper monotonicity properties and\n# kind of interpolates in a clever way between central\n# and upwind flux. It can be derived by solving the two-point boundary value problem\n# at the grid interval analytically.\n\n# Bernoulli function used in the exponential fitting discretization\nfunction bernoulli(x)\n    if abs(x)<nextfloat(eps(typeof(x)))\n        return 1\n    end\n    return x/(exp(x)-1)\nend\n\nfunction exponential_flux!(f,u0,edge,data)\n    u=unknowns(edge,u0)\n    vh=project(edge,data.v)\n    Bplus= data.D*bernoulli(vh/data.D)\n    Bminus=data.D*bernoulli(-vh/data.D)\n    f[1]=Bminus*u[1,1]-Bplus*u[1,2]\nend\n\n\nfunction calculate(grid,data,flux,verbose)\n\n    sys=VoronoiFVM.System(grid,VoronoiFVM.Physics(flux=flux, data=data))\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Set boundary conditions\n    boundary_dirichlet!(sys,1,1,0.0)\n    boundary_dirichlet!(sys,1,2,1.0)\n\n    # Create a solution array\n    inival=unknowns(sys,inival=0.5)\n    solution=unknowns(sys)\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n\n    # Stationary solution of the problem\n    solve!(solution,inival,sys, control=control)\n    return solution\nend\n\nfunction main(;n=10,Plotter=nothing,verbose=false,D=0.01,v=1.0)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n)\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n    data=(v=[v],D=D)","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"Calculate three stationary solutions with different ways to calculate flux","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"    solution_exponential=calculate(grid,data,exponential_flux!,verbose)\n    solution_upwind=calculate(grid,data,upwind_flux!,verbose)\n    solution_central=calculate(grid,data,central_flux!,verbose)","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"Visualize solutions using GridVisualize.jl","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"    p=GridVisualizer(Plotter=Plotter,layout=(3,1))\n    scalarplot!(p[1,1],grid,solution_exponential[1,:],title=\"exponential\")\n    scalarplot!(p[2,1],grid,solution_upwind[1,:],title=\"upwind\")\n    scalarplot!(p[3,1],grid,solution_central[1,:],title=\"centered\",show=true)\n\n    # Return test value\n    return sum(solution_exponential)+sum(solution_upwind)+sum(solution_central)\nend\n\nfunction test()\n    testval=2.523569744561089\n    main() ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"","category":"page"},{"location":"examples/Example102_StationaryConvectionDiffusion1D/","page":"102: 1D Stationary convection-diffusion equation","title":"102: 1D Stationary convection-diffusion equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example406_WeirdReaction/#:-1D-Weird-Surface-Reaction","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"","category":"section"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"(source code)","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"Species A and B exist in the interior of the domain, species C lives a the boundary Gamma_1.  We assume a heterogeneous reaction scheme where A reacts to B with a rate depending on nabla A near the surface","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"beginaligned\n      A leftrightarrow B\nendaligned","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"In Omega, both A and B are transported through diffusion:","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"beginaligned\npartial_t u_B - nablacdot D_A nabla u_A  = f_A\npartial_t u_B - nablacdot D_B nabla u_B  = 0\nendaligned","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"Here, f(x) is a source term creating A. On Gamma_2, we set boundary conditions","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"beginaligned\nD_A nabla u_A  = 0\nu_B=0\nendaligned","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"describing no normal flux for A and zero concentration of B. On Gamma_1, we use the mass action law to describe the boundary reaction and the evolution of the boundary concentration C. We assume that there is a limited amount of surface sites S for species C, so in fact A has to react with a free surface site in order to become C which reflected by the factor 1-u_C. The same is true for B.","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"beginaligned\nR_AB(u_A u_B)=k_AB^+exp(u_A(0))u_A - k_AB^-exp(-u_A(0))u_B\n- D_A nabla u_A  +  R_AB(u_A u_B) =0 \n- D_B nabla u_B  -  R_AB(u_A u_B) =0 \nendaligned","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"module Example406_WeirdReaction\nusing Printf\nusing VoronoiFVM\nusing SparseArrays\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,\n              Plotter=nothing,\n              verbose=false,\n              tend=1,\n              unknown_storage=:sparse,\n              autodetect_sparsity=true)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    N=length(X)\n\n    grid=VoronoiFVM.Grid(X)\n    # By default, \\Gamma_1 at X[1] and \\Gamma_2 is at X[end]\n\n    # Species numbers\n    iA=1\n    iB=2\n    iC=3\n\n\n    # Diffusion flux for species A and B\n    D_A=1.0\n    D_B=1.0e-2\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[iA]=D_A*(u[iA,1]-u[iA,2])\n        f[iB]=D_B*(u[iB,1]-u[iB,2])\n    end\n\n    # Storage term of species A and B\n    function storage!(f,u,node)\n        f[iA]=u[iA]\n        f[iB]=u[iB]\n    end\n\n    # Source term for species a around 0.5\n    function source!(f,node)\n        x1=node[1]-0.5\n        f[iA]=exp(-100*x1^2)\n    end\n\n    # Reaction constants (p = + , m = -)\n    # Choosen to prefer path A-> B\n    kp_AB=1.0\n    km_AB=0.1\n\n\n    function breaction!(f,u,node)\n        if  node.region==1\n            R=kp_AB*exp(u[iC])*u[iA] - exp(-u[iC])*km_AB*u[iB]\n            f[iA]+=R\n            f[iB]-=R\n        end\n    end\n\n    # This generic operator works on the full solution seen as linear vector, and indexing\n    # into it needs to be performed with the help of idx (defined below for a solution vector)\n    # Its sparsity is detected automatically using SparsityDetection.jl\n    # Here, we calculate the gradient of u_A at the boundary and store the value in u_C which\n    # is then used as a parameter in the boundary reaction\n    function generic_operator!(f,u,sys)\n        f.=0\n        f[idx[iC,1]]=u[idx[iC,1]]  + 0.1*(u[idx[iA,1]]-u[idx[iA,2]])/(X[2]-X[1])\n    end","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"If we know the sparsity pattern, we can here create a sparse matrix with values set to 1 in the nonzero slots. This allows to circumvent the autodetection which may takes some time.","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"    function generic_operator_sparsity(sys)\n        idx=unknown_indices(unknowns(sys))\n        sparsity=spzeros(num_dof(sys),num_dof(sys))\n        sparsity[idx[iC,1],idx[iC,1]]=1\n        sparsity[idx[iC,1],idx[iA,1]]=1\n        sparsity[idx[iC,1],idx[iA,2]]=1\n        sparsity\n    end\n\n\n\n\n    if autodetect_sparsity\n        physics=VoronoiFVM.Physics(\n            num_species=3,\n            breaction=breaction!,\n            generic=generic_operator!,\n            flux=flux!,\n            storage=storage!,\n            source=source!\n        )\n    else\n        physics=VoronoiFVM.Physics(\n            num_species=3,\n            breaction=breaction!,\n            generic=generic_operator!,\n            generic_sparsity=generic_operator_sparsity,\n            flux=flux!,\n            storage=storage!,\n            source=source!\n        )\n    end\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    # Enable species in bulk resp\n    enable_species!(sys,iA,[1])\n    enable_species!(sys,iB,[1])\n\n    # Enable surface species\n    enable_boundary_species!(sys,iC,[1])\n\n    # Set Dirichlet bc for species B on \\Gamma_2\n    boundary_dirichlet!(sys,iB,2,0.0)\n\n    # Initial values\n    inival=unknowns(sys)\n    inival.=0.0\n    U=unknowns(sys)\n    idx=unknown_indices(U)\n\n    tstep=0.01\n    time=0.0\n    T=Float64[]\n    u_C=Float64[]\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys,tstep=tstep,control=control)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        # Record  boundary pecies\n        push!(T,time)\n        push!(u_C,U[iC,1])\n\n        scalarplot!(p[1,1],grid,U[iA,:],label=\"[A]\",title=@sprintf(\"max_A=%.5f max_B=%.5f u_C=%.5f\",maximum(U[iA,:]),maximum(U[iB,:]),u_C[end]),color=:red)\n        scalarplot!(p[1,1],grid,U[iB,:], label=\"[B]\",clear=false,color=:blue)\n        scalarplot!(p[2,1],copy(T),copy(u_C),label=\"[C]\",clear=true,show=true)\n    end\n    return U[iC,1]\nend\n\nfunction test()\n    testval=0.007027597470502758\n    main(unknown_storage=:sparse) ≈ testval &&\n        main(unknown_storage=:dense) ≈ testval &&\n        main(unknown_storage=:sparse,autodetect_sparsity=false) ≈ testval &&\n        main(unknown_storage=:dense,autodetect_sparsity=false) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"","category":"page"},{"location":"examples/Example406_WeirdReaction/","page":"406: 1D Weird Surface Reaction","title":"406: 1D Weird Surface Reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"physics/#Physics-and-special-functions","page":"Physics & special functions","title":"Physics & special functions","text":"","category":"section"},{"location":"physics/#Types-and-Constants","page":"Physics & special functions","title":"Types and Constants","text":"","category":"section"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:type]","category":"page"},{"location":"physics/#VoronoiFVM.AbstractData","page":"Physics & special functions","title":"VoronoiFVM.AbstractData","text":"abstract type AbstractData\n\nAbstract type for user data.\n\n!!! Deprecate There is no benefit in inheriting from AbstractData and this type will be removed in a future release.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractPhysics","page":"Physics & special functions","title":"VoronoiFVM.AbstractPhysics","text":"abstract type AbstractPhysics\n\nAbstract type for physics.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics","page":"Physics & special functions","title":"VoronoiFVM.Physics","text":"struct Physics{Flux<:Function, Reaction<:Function, Storage<:Function, Source<:Function, BReaction<:Function, BStorage<:Function, GenericOperator<:Function, GenericOperatorSparsity<:Function, Data} <: VoronoiFVM.AbstractPhysics\n\nPhysics data record.\n\nflux::Function\nFlux between neigboring control volumes: flux(f,_u,edge) or flux(f,_u,edge,data) should return in f[i] the flux of species i along the edge joining circumcenters of neigboring control volumes. u=unknowns(_u) returns a 2D array such that for species i, u[i,1] and u[i,2] contain the unknown values at the corresponding ends of the edge.\n\nstorage::Function\nStorage term (term under time derivative): storage(f,u,node) or storage(f,u,node,data)\nIt should return in f[i] the storage term for the i-th equation. u[i] contains the value of the i-th unknown.\n\nreaction::Function\nReaction term:  reaction(f,u,node) or reaction(f,u,node,data)\nIt should return in f[i] the reaction term for the i-th equation. u[i] contains the value of the i-th unknown.\n\nsource::Function\nSource term: source(f,node) or source(f,node,data).\nIt should return the in f[i] the value of the source term for the i-th equation.\n\nbreaction::Function\nBoundary reaction term:  breaction(f,u,node) or breaction(f,u,node,data) Similar to reaction, but restricted to the inner or outer boundaries.\n\nbstorage::Function\nBoundary storage term: bstorage(f,u,node) or bstorage(f,u,node,data) Similar to storage, but restricted to the inner or outer boundaries.\n\ngeneric_operator::Function\nGeneric operator  generic_operator(f,u,sys). This operator acts on the full solution u of a system. Sparsity is detected automatically  unless generic_operator_sparsity is given.\n\ngeneric_operator_sparsity::Function\nFunction defining the sparsity structure of the generic operator. This should return the sparsity pattern of the generic_operator.\n\ndata::Any\nUser data (parameters). This allows to pass various parameters to the callback functions.\n\nnum_species::Int8\nNumber of species including boundary species.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics-Tuple{}","page":"Physics & special functions","title":"VoronoiFVM.Physics","text":"Physics(; num_species, data, flux, reaction, storage, source, breaction, bstorage, generic, generic_sparsity)\n\n\nConstructor for physics data with default values for the constitutive callback functions.\n\nThere are two variants of this constructor. It data is given, all callback functions should accept a last data argument. Otherwise, no data are passed explicitely, and it is assumed that constitutive callbacks take parameters from the closure where the function is defined.\n\n\n\n\n\n","category":"method"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:constants]","category":"page"},{"location":"physics/#Methods","page":"Physics & special functions","title":"Methods","text":"","category":"section"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:function]","category":"page"},{"location":"physics/#Base.show-Tuple{IO, VoronoiFVM.AbstractPhysics}","page":"Physics & special functions","title":"Base.show","text":"show(io, physics)\n\n\nShow physics object\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.hasdata-Tuple{VoronoiFVM.Physics}","page":"Physics & special functions","title":"VoronoiFVM.hasdata","text":"hasdata(physics)\n\n\nCheck if physics object has data\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.fbernoulli-Tuple{Any}","page":"Physics & special functions","title":"VoronoiFVM.fbernoulli","text":"fbernoulli(x::Any) -> Any\n\n\nBernoulli function implementation for exponentially fitted finite volumes.\n\nThe name fbernoulli has been chosen to avoid confusion with Bernoulli from JuliaStats/Distributions.jl\n\nReturns a real number containing the result.\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.fbernoulli_pm-Tuple{Any}","page":"Physics & special functions","title":"VoronoiFVM.fbernoulli_pm","text":"fbernoulli_pm(x::Any) -> Tuple{Any, Any}\n\n\nBernoulli function implementation for exponentially fitted finite volumes, joint evaluation for positive and negative argument\n\nUsually, we need B(x), B(-x) togehter,  and it is cheaper to calculate them together.\n\nReturns two real numbers containing the result for argument x and argument -x.\n\n\n\n\n\n","category":"method"},{"location":"changes/#Changes","page":"Changes","title":"Changes","text":"","category":"section"},{"location":"changes/#v0.10.3-Feb-11,-2019","page":"Changes","title":"v0.10.3 Feb 11, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Introduce non-mutating solve\nOptionally record history if log kw is true in solve.","category":"page"},{"location":"changes/#v0.10.0-Jan-9-2021","page":"Changes","title":"v0.10.0 Jan 9 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Moving visualization to the package GridVisualize.jl, emerging from  the visualization methods in ExtendableGrids","category":"page"},{"location":"changes/#v0.9.0-Dec-21-2020","page":"Changes","title":"v0.9.0 Dec 21 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Add the possibility to interface with DifferentialEquations.jl\nBreaking: The API change to passing the unknowns to the an edge callback as a matrix turned out to be a dead end in the strategic sense. In order to extend functionality, we need to be able to pass more data to  which we can apply differetiation. Particular plans involve bifurcation parameters and reconstructed gradients. So we return to the viewK/viewL pattern we had before. However,  these are now aliases:\nviewK(edge,u)=unknowns(edge,u,1)\nviewL(edge,u)=unknowns(edge,u,2)\nIn order to ease refactoring in the case where models have been implemented with Matrix access to the unknowns, unknowns(edge,u) returns a matrix of the edge unknowns.    For refactoring, just rewrite e.g.","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"    function flux(y,u,edge)\n        for ispec=1:nspec\n            y[ispec]=u[ispec,1]-u[ispec,2]\n        end\n    end","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"to","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"    function flux(y,u0,edge)\n        u=unknowns(edge,u0)\n        for ispec=1:nspec\n            y[ispec]=u[ispec,1]-u[ispec,2]\n        end\n    end","category":"page"},{"location":"changes/#v0.8.5-Sep-1-2020","page":"Changes","title":"v0.8.5 Sep 1 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"allow any object in Physics.data  (thanks Jan Weidner)\nadd generic operator for non-canonical problem structures","category":"page"},{"location":"changes/#v0.8.4-July-25-2020","page":"Changes","title":"v0.8.4 July 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Update ExtendableGrids + ExtendableSparse","category":"page"},{"location":"changes/#v0.8.3-June-25-2020","page":"Changes","title":"v0.8.3 June 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replace splatting by dispatch on availability of data record","category":"page"},{"location":"changes/#v0.8.2-May-15-2020","page":"Changes","title":"v0.8.2 May 15 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Form factors are now pre-calculated and stored\nIntroduced update_grid! for triggering re-calculation if coordinates have changed","category":"page"},{"location":"changes/#v0.8.1-May-2-2020","page":"Changes","title":"v0.8.1 May 2 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Introduce evolve! : time solver with automatic timestep control","category":"page"},{"location":"changes/#v0.8-Apr-28,-2020","page":"Changes","title":"v0.8 Apr 28, 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replaced VoronoiFVM grid module by  ExtendableGrids.jl\nMoved grid generation, modification, plotting  over to ExtendableGrids\nNecessary changes in codes using VoronoiFVM:\nReplace grid.coord by coord obtained via coord=coordinates(grid) or  coord=grid[Coordinates] after importing ExtendableGrids\nReplace VoronoiFVM.plot by ExtendableGrids.plot.\nIn the plot method, Plotter is now a keyword argument\nVoronoiFVM.Grid() now returns a ExtendableGrids.ExtendableGrid,  in fact it is just an alias to ExtendableGrids.simplexgrid\nFor using any methods on grids like cellmask! one nees to use ExtendableGrids\nSubgrids now are of the same type ExtendableGrids,  views are currently defined for vectors only.","category":"page"},{"location":"changes/#v0.7-Feb-28-2020","page":"Changes","title":"v0.7 Feb 28 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"API modification:\nBreaking:\ndata parameter passed to physics callbacks only if Physics object is created with data parameter.\nThis makes the API more consistent in the case that parameters are just taken from the closure (the scope where the physics functions are defined) and no data object has been created.\nReplace node.coord[i] by  node[i].\nReplace edge.coordK[i] by  edge[i,1].\nReplace edge.coordL[i] by  edge[i,2].\nThis now directly accesses the coordinate field of the grid and avoids copying of the coordinates\nBackward compatible:  \nNo need for viewK and viewL in edge callbacks (they also make trouble with allocations...)\nReplace uk[i] by u[i,1]\nReplace ul[i] by u[i,2]\nReplace VoronoiFVM.DenseSystem(...)  by VoronoiFVM.System(..., unknown_storage=:dense)\nReplace VoronoiFVM.SparseSystem(...) by VoronoiFVM.System(..., unknown_storage=:sparse)\nNo allocations anymore in assembly loop:\nReplaced ElasticArray in Grid by normal one - this was the largest regression\nReturn nothing from mutating methods to avoid some allocations \nIndexing in formfactors.jl with Int","category":"page"},{"location":"changes/#v0.6.5-Jan-25-2020","page":"Changes","title":"v0.6.5 Jan 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"use updateindex! for matrix, depend on ExtendableSparse 0.2.6","category":"page"},{"location":"changes/#v0.6.4-2020-01-20","page":"Changes","title":"v0.6.4 2020-01-20","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Rearranged + commented boundary assembly loop\nReworked + renamed some examples\nDocument that unknowns doesn't initialize values.","category":"page"},{"location":"changes/#v0.6.3-2019-12-21","page":"Changes","title":"v0.6.3 2019-12-21","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"remove xcolptrs call Update dependency on ExtendableSparse","category":"page"},{"location":"changes/#v0.6.2-2019-12-20","page":"Changes","title":"v0.6.2 2019-12-20","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Updated dependency list (Triangulate ^0.4.0)","category":"page"},{"location":"changes/#v0.6.1,-2019-12-17","page":"Changes","title":"v0.6.1, 2019-12-17","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"return \"plotted\" for being able to  place colormap\nrequire Triangulate >= 0.3.0","category":"page"},{"location":"changes/#v0.6.0,-Dec-15-2019","page":"Changes","title":"v0.6.0, Dec 15 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Removed Triangle submodule, depend on new Triangulate.jl Triangle wrapper\nlink to source code in examples\nboundary_dirichlet! etc methods for setting boundary conditions","category":"page"},{"location":"changes/#v0.5.6-Dec-5-2019","page":"Changes","title":"v0.5.6 Dec 5 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Bug fixes\ncheck triangle input for min 3 points\ncheck triangle edgelist for C_NULL\nvoronoi plot","category":"page"},{"location":"changes/#v0.5.5-Dec-4-2019","page":"Changes","title":"v0.5.5 Dec 4 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"(Temporary) Copy of TriangleRaw as Triangle submodule. To be replaced by dependency on evisioned package","category":"page"},{"location":"changes/#v0.5.4-Dec-3-2019","page":"Changes","title":"v0.5.4 Dec 3 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Re-enabled ElasticArrays in grid structure (for the time being)\nAdded potkink example: this adds an inner boudary","category":"page"},{"location":"changes/#v0.5.3-Dec-1-2019","page":"Changes","title":"v0.5.3 Dec 1 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"triangle in optional submodule\nModified API for plotting\nRemoved formal dependency on Plots and PyPlot\nUse Plotter module as first parameter to plot methods  - replaces fvmplot and fvmpyplot functions. Use VoronoiFVM.plot(PyPlot,...) resp.  VoronoiFVM.plot(Plots,...)\nNo more complaints when package is used in environment with plots or pyplot installed\nModified API for impedance","category":"page"},{"location":"changes/#v0.5.2-Nov-19,-2019","page":"Changes","title":"v0.5.2 Nov 19, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Reorganized grid stuff\nIncluded triangle (after Ideas from TriangleMesh.jl)","category":"page"},{"location":"changes/#v0.5.1-Nov-13,-2019","page":"Changes","title":"v0.5.1 Nov 13, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Fixed performance regression: AbstractArrays for Grid components were slow.\nAdded handling of cylindrical coordinates","category":"page"},{"location":"changes/#V0.5,-November-10,-2019","page":"Changes","title":"V0.5, November 10, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Velocity projections\nAdded edge handling to grid struct","category":"page"},{"location":"changes/#V0.4.2,-November-6,-2019","page":"Changes","title":"V0.4.2, November 6, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replaced PyPlot by Plots\nBetter and more examples","category":"page"},{"location":"changes/#V0.4,-July-12,-2019","page":"Changes","title":"V0.4, July 12, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Registered with Julia ecosystem\nEnhance Newton solver by embedding, exception handling\nReplace SparseMatrixCSC with ExtendableSparseMatrix\nfixed allocation issues in assembly\nassured that users get allocation stuff right via typed functions in physics structure\nmore julianic API","category":"page"},{"location":"changes/#V0.3,-April-9-2019","page":"Changes","title":"V0.3, April 9 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Renamed from TwoPointFluxFVM to  VoronoiFVM\nComplete rewrite of assembly allowing sparse or dense matrix  to store degree of freedom information\nSolution is a nnodes x nspecies sparse or dense matrix\nThe wonderful array interface of Julia still provides slicing etc in oder to access  species without need to write any bulk_solution stuff or whatever when using the sparse variant\nRe-export value() for debugging in physics functions\nTest function handling for flux calculation\nFirst working steps to impedance handling\nAbolished Graph in favor of  Grid, Graph was premature optimization...","category":"page"},{"location":"changes/#V0.2,-Feb-20,-2019","page":"Changes","title":"V0.2, Feb 20, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Changed signature of all callback functions: This also allows to pass user defined arrays etc. to the callback functions. In particular, velocity vectors can be passed this way.\nBesides of flux!(), they now all have node::VoronoiFVM.Node as a second argument.\nflux!() has edge::VoronoiFVM.Edge as a second argument\nthe x argument in source!() is omitted, the same data  are now found in node.coord","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"New method edgelength(edge::VoronoiFVM.Edge)","category":"page"},{"location":"changes/#V0.1,-Dec.-2018","page":"Changes","title":"V0.1, Dec. 2018","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Initial release","category":"page"},{"location":"method/#The-Voronoi-finite-volume-method","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"","category":"section"},{"location":"method/#Construction-of-control-volumes","page":"The Voronoi finite volume method","title":"Construction of control volumes","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Start with a triangulation of a polygonal domain (intervals in 1D, triangles in 2D, tetrahedra in   3D). Such a triangulation can be generated by e.g. by the mesh generators triangle and TetGen. These are available in Julia via Triangulate.jl and TetGen.jl. For simple geometries – tensor products of lower dimensional grids – such triangulation can be created more easily. The package ExtendableGrids.jl manages a grid structure which can be uses in this package. SimplexGridFactory.jl interfaces this grid structure with  Triangulate.jl and TetGen.jl.\nJoin triangle circumcenters by lines rightarrow create Voronoi cells which can serve as control volumes, akin to representative elementary volumes (REV) used to derive conservation laws.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../trivoro.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Black + green: triangle nodes\nGray: triangle edges\nBlue: triangle circumcenters\nRed: Boundaries of Voronoi cells","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This construction requires (in 2D) that sums of angles opposite to triangle edges are less than pi and that angles opposite to boundary edges are less than fracpi2. This property is called the \"boundary conforming Delaunay property\". It has different equivalent definitions and analogues in 3D.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"As a consequence, there is a 1:1 incidence between triangulation nodes and Voronoi cells. Moreover, the angle between the interface between two Voronoi cells and the edge between their corresponding nodes is fracpi2.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The idea is now to use these Voronoi cells as REVs aka control volumes aka finite volume cells.","category":"page"},{"location":"method/#The-discretization-approach","page":"The Voronoi finite volume method","title":"The discretization approach","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../vor.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Given a continuity equation nablacdot vec j=0 in a domain Omega, integrate this over a contol volume omega_k with associated node vec x_k and apply Gauss theorem:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\n0=int_omega_k nablacdot  vec j  domega \n=int_partialomega_k vec jcdot vec n ds\n=sum_lin N_k int_omega_kcap omega_l vec jcdot vec n ds + int_partialomega_kcap partialOmega vec jcdot vec n ds\napprox sum_lin N_k fracsigma_klh_klg(u_k u_l)+ gamma_k b(u_k)\nendaligned","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Here, N_k is the set of neighbor control volumes, sigma_kl=omega_kcap omega_l, h_kl=vec x_k -vec x_l, gamma_k=partialomega_kcap partialOmega,  where  cdot denotes the measure (length resp. area) of a geometrical entity. In the approximation step, we replaced the normal flux integral over the interface between two control volumes by the measure of this interface multiplied by a function depending on the unknowns associated to the respective nodes divided by the distance between these nodes. The second integral has  been replaced by a boundary condition on the flux vec jcdot vec n + b(u)=0. We note that by the very construction, the discretization nodes associated to control volumes adjacent to the domain boundary are located at the domain boundary.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The flux function g can be derived from usual finite difference formulas.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For instance, for the diffusion flux vec j=-Dvecnabla u, we use g(u_k u_l)=D(u_k -u_l).","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For a convective diffusion flux vec j = -Dvec nabla u + u vec v, one can chose the upwind flux","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\ng(u_k u_l)=D(u_k -u_l) + \nv_klbegincases\nu_k v_kl0\nu_l v_klleq 0\nendcases\nendaligned","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where v_kl=frach_klsigma_klint_omega_kcap omega_l vec v cdot vec n_kl  ds Fluxes also can depend nonlinearily on u.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach easily generalizes to time dependent nonlinear transport-reaction problems with storage terms s(u), reaction terms r(u) and source terms f:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"partial_t s(u) + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Semidiscretization in time (for implicit Euler) leads to ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"fracs(u)-s(u^flat)tau + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where tau is the time step size and u^flat is the solution from the old timestep. The approximation  approach then for each control volume gives","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"omega_kfracs(u_k)-s(u_k^flat)tau + sum_lin N_k fracsigma_klh_klg(u_k u_l)+ gamma_k b(u_k) + omega_k (r(u_k)- f(vec x_k))=0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"If n is the number of discretization nodes, we get a system of n equations with n unknowns which under proper conditions on rgsb has a unique solution.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach generalizes to systems of m partial differential equations, which formally can be written in the same way, but assuming that u is an m-vector function of vec xt, and rgbs are m-vector funtions of their arguments.","category":"page"},{"location":"method/#Why-this-method-?","page":"The Voronoi finite volume method","title":"Why this method ?","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Independent of space dimension, the method (with properly chosen flux functions) is able to preserve a number of physical quantities if they are present on the continuous level:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"local and global mass conservation\npositivity of solutions\nmaximum principle: in the absence of source and reaction terms, local extrema of the stationary solution are located at the domain boudaries, never in the interior. For transient problems, local extrema in the interior can only come from the initial value. \nConsistency to thermodynamics: entropy production etc.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Many of these properties are hard to prove for finite element methods, in particular for the convection-diffusion case.","category":"page"},{"location":"method/#Why-not-this-method-?","page":"The Voronoi finite volume method","title":"Why not this method ?","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"There are a number of cases where this method needs to be replaced by something else or at least to be applied with great care:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Anisotropic diffusion only works with proper mesh alignment \nStrongly varying capacity (in the function s) at domain interfaces lead to inexact breaktrough curves\nSharp moving convection fronts are smeared out too strongly","category":"page"},{"location":"method/#History-and-literature","page":"The Voronoi finite volume method","title":"History and literature","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The following list  is work in progress and incomplete, but it references some sources behind the ideas in this package.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Macneal, R. H. (1953). An asymmetrical finite difference network. Quarterly of Applied Mathematics, 11(3), 295-310.  (pdf via JSTOR). Perhaps this is the earliest mentioning of the method. Note that it  was used on an electrical analog computer. \nGärtner, K., & Kamenski, L. (2019). Why do we need Voronoi cells and Delaunay meshes? arXiv preprint arXiv:1905.01738. A recent overview on the merits of the method. One of the authors belongs to the pioneers of its application in 3D.\nFuhrmann, J., & Langmach, H. (2001). Stability and existence of solutions of time-implicit finite volume schemes for viscous nonlinear conservation laws. Applied Numerical Mathematics, 37(1-2), 201-230. A discussion of the method applied to rather general nonlinear scalar problems.\nSi, H., Gärtner, K., & Fuhrmann, J. (2010). Boundary conforming Delaunay mesh generation. Computational Mathematics and Mathematical Physics, 50(1), 38-53. Definition of the boundary conforming Delaunay property. \nEymard, R., Fuhrmann, J., & Gärtner, K. (2006). A finite volume scheme for nonlinear parabolic equations derived from one-dimensional local Dirichlet problems. Numerische Mathematik, 102(3), 463-495. General concept of the derivation of upwind fluxes for nonlinear problems.\nFarrell, P., Rotundo, N., Doan, D. H., Kantner, M., Fuhrmann, J., & Koprucki, T. (2017). Drift-diffusion models. In Handbook of Optoelectronic Device Modeling and Simulation (pp. 733-772). CRC Press. Overview and introduction to the method applied to semiconductor device simulation. This problem class profits most from the desirable properties of the method.","category":"page"},{"location":"method/#Software-API-and-implementation","page":"The Voronoi finite volume method","title":"Software API and implementation","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The entities describing the discrete system can be subdivided into two categories:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"geometrical data: omega_k gamma_k sigma_kl h_kl together with the connectivity information of the triangles\nphysical data: the number m and the functions sgrbf describing the particular problem.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This structure allows to describe the problem to be solved by data derived from the discretization grid and by the functions describing the physics, giving rise to a software API.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The solution of the nonlinear systems of equations can be performed by Newton's method combined with various direct and iterative linear solvers.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The generic programming capabilities of Julia allow for an implementation of the method which results in an API which consists in  the implementation of functions sgrbf without the need to write code for their derivatives.","category":"page"},{"location":"runexamples/#Running-the-examples","page":"Running the examples","title":"Running the examples","text":"","category":"section"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"The examples have been designed with the following issues in mind:","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"they run from the Julia REPL\neach example is a Julia module named similar to the basename of the example file.\nan example can be uses as the starting point for a project \nthe examples at the same time comprise the test suite for VoronoiFVM.","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"Plotting is performed using the GridVisualize.jl package which interfaces PyPlot.jl, Plots.jl, Makie.jl.","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"In order to run ExampleXXX, peform the following steps:","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"Download the example file (e.g. via the source code link at the top)\nCall Julia with  an Julia environment which contains VoronoiFVM.jl, ExtendableGrids.jl, GridVisualize.jl  and e.g. PyPlot.jl\ninclude(\"ExampleXXX.jl\")\nRun the example via ExampleXXX.main(Plotter=PyPlot)","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"Due to the encapsulation into modules, you can load as many examples as you like.","category":"page"},{"location":"runexamples/","page":"Running the examples","title":"Running the examples","text":"If you want to modifiy the example, consider using Revise.jl and includet. ","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/#:-1D-Nonlinear-Storage","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"","category":"section"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"(source code)","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"This equation comes from the transformation of the nonlinear diffuision equation.","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"partial_t u^frac1m -Delta u = 0","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"in Omega=(-11) with homogeneous Neumann boundary conditions. We can derive an exact solution from the Barenblatt solution of the previous example.","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"module Example107_NonlinearStorage1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction barenblatt(x,t,m)\n    tx=t^(-1.0/(m+1.0))\n    xx=x*tx\n    xx=xx*xx\n    xx=1- xx*(m-1)/(2.0*m*(m+1));\n    if xx<0.0\n        xx=0.0\n    end\n    return tx*xx^(1.0/(m-1.0))\nend\n\n\nfunction main(;n=20,m=2.0,Plotter=nothing,verbose=false, unknown_storage=:sparse,tend=0.01,tstep=0.0001)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n/2)\n    X=collect(-1:h:1)\n    grid=VoronoiFVM.Grid(X)\n\n    # Flux function which describes the flux\n    # between neigboring control volumes\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=u[1,1]-u[1,2]\n    end\n\n    ϵ=1.0e-10\n\n    # Storage term\n    # This needs to be regularized as its derivative\n    # at 0 is infinity\n    function storage!(f,u,node)\n        f[1]=(ϵ+u[1])^(1.0/m)\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        storage=storage!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Create a solution array\n    inival=unknowns(sys)\n    solution=unknowns(sys)\n    t0=0.001\n\n    # Broadcast the initial value\n    inival[1,:].=map(x->barenblatt(x,t0,m)^m,X)\n    solution.=inival\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    time=t0\n    p=GridVisualizer(Plotter=Plotter,layout=(2,1))\n    while time<tend\n        time=time+tstep\n        solve!(solution,inival,sys,control=control,tstep=tstep)\n        inival.=solution\n        scalarplot!(p[1,1],grid,solution[1,:],title=@sprintf(\"numerical, t=%.5f\",time),clear=true)\n        scalarplot!(p[2,1],grid,map(x->barenblatt(x,time,m)^m,grid),title=@sprintf(\"exact, t=%.4f\",time),clear=true)\n        sleep(1.0e-5)","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"   yield()","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"    end\n    return sum(solution)\nend\n\n\nfunction test()\n    testval=173.84998139534142\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"","category":"page"},{"location":"examples/Example107_NonlinearStorage1D/","page":"107: 1D Nonlinear Storage","title":"107: 1D Nonlinear Storage","text":"This page was generated using Literate.jl.","category":"page"},{"location":"grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"grid/#Types-and-Constants","page":"Grid","title":"Types and Constants","text":"","category":"section"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:type]","category":"page"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:constant]","category":"page"},{"location":"grid/#Methods","page":"Grid","title":"Methods","text":"","category":"section"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:function]","category":"page"},{"location":"examples/Example203_CoordinateSystems/#:-Various-coordinate-systems","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"","category":"section"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"(source code)","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"module Example203_CoordinateSystems\n\nusing VoronoiFVM\nusing LinearAlgebra\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;nref=0,r1=0.0, r2=5.0, dim=2,Plotter=nothing)\n    h=0.1*2.0^(-nref)\n    R=collect(r1:h:r2)\n    Z=collect(0:h:2)\n    grid=VoronoiFVM.Grid(R)\n    if dim==2\n        grid=VoronoiFVM.Grid(R,Z)\n    end\n    circular_symmetric!(grid)\n\n    function symlapcyl(r)\n        if r1≈0.0\n            return 0.25*(r2*r2-r*r);\n        else\n            return (log(r)-log(r2))/(log(r1)-log(r2));\n        end\n    end\n\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=u[1,1]-u[1,2]\n    end\n\n    function source!(f,node)\n        if r1≈0.0\n            f[1]=1.0\n        else\n            f[1]=0.0\n        end\n    end","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"Create a physics structure","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"    physics=VoronoiFVM.Physics(num_species=1,flux=flux!,source=source!)\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=:dense)\n    ispec=1\n    enable_species!(sys,ispec,[1])\n    ileft=1\n    if dim==2\n        ileft=4\n    end\n    if !(r1≈0.0)\n        boundary_dirichlet!(sys,ispec,ileft,1.0)\n    end\n    boundary_dirichlet!(sys,ispec,2,0.0)\n\n    inival=unknowns(sys)\n    solution=unknowns(sys)\n    inival.=0\n    solution.=0","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"Solve stationary problem","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"    solve!(solution,inival,sys)\n\n    scalarplot(grid,solution[1,:],Plotter=Plotter)\n\n    exact=symlapcyl.(coordinates(grid)[1,:])\n    err=norm(solution[1,:]-exact,Inf)\nend","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"Called by unit test","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"function test()\n    main() <1.0e-14\nend\n\nend","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"","category":"page"},{"location":"examples/Example203_CoordinateSystems/","page":"203: Various coordinate systems","title":"203: Various coordinate systems","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example101_Laplace1D/#:-1D-Laplace-equation","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"","category":"section"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"(source code)","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Let Omega=(gamma_1gamma_2) with gamma_1=0, gamma_2=1. This is the simplest second order boundary value problem (BVP) for a partial differential equation  (PDE):","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"-Delta u =0\nu(gamma_1)=g_1\nu(gamma_2)=g_2","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We replace the Dirichlet boundary condition by a Robin boundary condition with a penalty parameter frac1varepsilon:","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"nabla u(gamma_1) + frac1varepsilon(u(gamma_1)-g_1)=0  \n-nabla u(gamma_2) + frac1varepsilon(u(gamma_2)-g_2)\n=0","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This penalty method for the implementation of Dirichlet boundary conditions is used throughout VoronoiFVM.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In order to discretize it, we choose collocation points gamma_1=x_1  x_2  dots  x_n=gamma_2.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"For instance, we can choose 6 collocation points in (01): From these, we create a discretization grid structure for working with the method.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This implicitely creates a number of control volumes omega_k  around each discretization point x_k: Let sigma_kk+1=fracx_k+x_k+12. Then omega_1=(gamma_1sigma_12), omega_k= (sigma_k-1k sigma_kk+1) for k=2dots n-1, omega_n=(sigma_n-1ngamma_2).","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":" x1    x2    x3    x4    x5    x6\n o-----o-----o-----o-----o-----o\n |--|-----|-----|-----|-----|--|\n  ω1  ω2     ω3    ω4    ω5  ω6","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"For each omega_k, we integrate the equation","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"beginaligned\n0=int_omega_k -Delta u domega=  -int_partial omega_k nabla u ds\n= begincases\nu(sigma_12) - u(0) k=1\nu(sigma_kk+1) - u(sigma_k-1k)  1kn\nu(1)- u(sigma_nn+1)k=n\nendcases\napprox begincases\nfrac1x_2-x_1 g(u_1u_2) + frac1varepsilon(u_1-0) k=1\nfrac1x_k-x_k-1g(u_ku_k-1) -frac1x_k+1-x_kg(u_k+1u_k)  1kn\nfrac1varepsilon(u_n-1)+ frac1x_n-x_n-1 g(u_nu_n-1)k=n\nendcases\nendaligned","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In the last equation, we wrote u_k=u(x_k) and g(u_ku_l)=u_k-u_l. For the interior interfaces between control volumes, we replaced u by a difference quotient. In the boundary control volumes, we replaced u  by the boundary conditions.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In the example below, we fix a number of species and  write a Julia function describing g, we create a physics record, and a finite volume system with one unknown species and a dense matrix to describe it's degrees of freedom (the matrix used  to calculate the solution is sparse). We give the species the number 1 and enable it for grid region number one 1. Then, we set boundary conditions for species 1 at gamma_1 gamma_2.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We create a zero initial value and a solution vector and initialize them.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"With these data, we solve the system.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We wrap this example and all later ones into a module structure. This allows to load all of them at once into the REPL without name clashes. We shouldn't forget the corresponding end statement.","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"module Example101_Laplace1D\n\nusing VoronoiFVM\n\n\n# Flux function which describes the flux\n# between neigboring control volumes\nfunction g!(f,u0,edge)\n    u=unknowns(edge,u0)\n    f[1]=u[1,1]-u[1,2]\nend\n\n\nfunction main()\n\n    nspecies=1 ## Number of species\n    ispec=1    ## Index of species we are working with\n\n    # Create a one dimensional discretization grid\n    # Each grid cell belongs to a region marked by a region number\n    # By default, there is only one region numbered with 1\n    X=collect(0:0.2:1)\n    grid=VoronoiFVM.Grid(X)\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(num_species=nspecies,flux=g!)\n\n    # Create a finite volume system\n    sys=VoronoiFVM.System(grid,physics)\n\n    # Enable species 1 in region 1\n    enable_species!(sys,ispec,[1])\n\n    # Set boundary conditions at boundary regions 1 and 2\n    boundary_dirichlet!(sys,ispec,1,0.0)\n    boundary_dirichlet!(sys,ispec,2,1.0)\n\n    # Create & initialize array for solution and initial value\n    inival=unknowns(sys,inival=0)\n    solution=unknowns(sys)\n\n    # Solve stationary problem\n    solve!(solution,inival,sys)\n\n    # Return test value\n    return solution[3]\nend\n\n# Called by unit test\n\nfunction test()\n    main() ≈ 0.4\nend\n\nend","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"","category":"page"},{"location":"examples/Example101_Laplace1D/","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/#:-2D-Nonlinear-Poisson-with-boundary-reaction-and-boundary-species","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"","category":"section"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"(source code)","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"module Example220_NonlinearPoisson2D_BoundarySpecies\n\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false,unknown_storage=:sparse)\n\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n\n    k=1.0\n    eps=1.0\n    physics=VoronoiFVM.Physics(\n    num_species=3,\n    breaction=function(f,u,node)\n        if  node.region==2\n            f[1]=k*(u[1]-u[3])\n            f[3]=k*(u[3]-u[1])+ k*(u[3]-u[2])\n            f[2]=k*(u[2]-u[3])\n        end\n    end,\n\n    bstorage=function(f,u,node)\n        if  node.region==2\n            f[3]=u[3]\n        end\n    end,\n\n\n    flux=function(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=eps*(u[1,1]-u[1,2])\n        f[2]=eps*(u[2,1]-u[2,2])\n    end,\n\n    source=function(f,node)\n        x1=node[1]-0.5\n        x2=node[2]-0.5\n        f[1]=exp(-20.0*(x1^2+x2^2))\n    end,\n\n    storage=function(f,u,node)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n    )\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n    enable_boundary_species!(sys,3,[2])\n\n\n    function tran32!(a,b)\n        a[1]=b[2]\n    end\n\n    bgrid2=subgrid(grid,[2],boundary=true,transform=tran32!)\n\n    inival=unknowns(sys)\n    inival.=0.0\n    U=unknowns(sys)\n\n    eps=1.0e-2\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.tol_relative=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u5=0\n    p=GridVisualizer(Plotter=Plotter,layout=(3,1))\n    while time<1\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        tstep*=1.0\n        istep=istep+1\n        U_bound=view(U[3,:],bgrid2)\n        u5=U_bound[5]\n        scalarplot!(p[1,1],grid,U[1,:],clear=true)\n        scalarplot!(p[2,1],grid,U[2,:])\n        scalarplot!(p[3,1],bgrid2,U_bound,show=true,flimits=(0,0.0025))\n    end\n    return u5\nend\n\nfunction test()\n    main(unknown_storage=:sparse) ≈ 0.0020781361856598\n    main(unknown_storage=:dense) ≈ 0.0020781361856598\nend\nend","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#:-1D-Nonlinear-Poisson-equation","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"(source code)","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"Solve the nonlinear Poisson equation","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"-nabla varepsilon nabla u + e^u-e^-u = f","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"in Omega=(01) with boundary condition u(0)=0 and u(1)=1 with","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"f(x)=\n    begincases\n    1x05\n    -1 x05\n    endcases","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"This stationary problem is an example of a nonlinear Poisson equation or Poisson-Boltzmann equation. Such equation occur e.g. in simulations of electrochemical systems and semicondutor devices.","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"module Example105_NonlinearPoisson1D\nusing Printf\nusing VoronoiFVM\nusing ExtendableGrids\nusing GridVisualize\n\nfunction main(;n=10,Plotter=nothing,verbose=false, unknown_storage=:sparse)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n)\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n    # A parameter which is \"passed\" to the flux function via scope\n    ϵ=1.0e-3\n\n    # Flux function which describes the flux\n    # between neigboring control volumes\n    function flux!(f,u0,edge)\n        u=unknowns(edge,u0)\n        f[1]=ϵ*(u[1,1]-u[1,2])\n    end\n\n    # Source term\n    function source!(f,node)\n        if node[1]<=0.5\n            f[1]=1\n        else\n            f[1]=-1\n        end\n    end\n\n    # Reaction term\n    function reaction!(f,u,node)\n        f[1]=exp(u[1]) - exp(-u[1])\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        source=source!,\n        reaction=reaction!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n\n    sys=VoronoiFVM.System(grid,physics,unknown_storage=unknown_storage)\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Set boundary conditions\n    boundary_dirichlet!(sys,1,1,0.0)\n    boundary_dirichlet!(sys,1,2,1.0)\n\n    # Create a solution array\n    inival=unknowns(sys,inival=0.5)\n    solution=unknowns(sys)\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n\n    # Stationary solution of the problem\n    solve!(solution,inival,sys, control=control)\n\n    scalarplot(grid,solution[1,:],title=\"Nonlinear Poisson\", Plotter=Plotter)\n\n    return sum(solution)\nend\n\nfunction test()\n    testval=1.5247901344230088\n    main(unknown_storage=:sparse) ≈ testval && main(unknown_storage=:dense) ≈ testval\nend\n\nend","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"diffeq/#Interface-to-DifferentialEquations.jl","page":"Interface to DifferentialEquations.jl","title":"Interface to DifferentialEquations.jl","text":"","category":"section"},{"location":"diffeq/","page":"Interface to DifferentialEquations.jl","title":"Interface to DifferentialEquations.jl","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_diffeq_interface.jl\"]","category":"page"},{"location":"diffeq/#VoronoiFVM.eval_jacobian!-NTuple{4, Any}","page":"Interface to DifferentialEquations.jl","title":"VoronoiFVM.eval_jacobian!","text":"eval_jacobian!(J, u, sys, t)\n\n\nInterpret the  discrete problem as an ODE/DAE problem. Provide the  jacobi matrix calculation function for DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"diffeq/#VoronoiFVM.eval_rhs!-NTuple{4, Any}","page":"Interface to DifferentialEquations.jl","title":"VoronoiFVM.eval_rhs!","text":"eval_rhs!(du, u, sys, t)\n\n\nInterpret the  discrete problem as an ODE/DAE problem. Provide the  rhs function for DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"diffeq/#VoronoiFVM.jac_prototype-Tuple{VoronoiFVM.AbstractSystem}","page":"Interface to DifferentialEquations.jl","title":"VoronoiFVM.jac_prototype","text":"jac_prototype(sys)\n\n\nComplete the system and provide the jacobi matrix as prototype for the jacobian for use with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"diffeq/#VoronoiFVM.mass_matrix-Union{Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm} where Tm<:Integer}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"Interface to DifferentialEquations.jl","title":"VoronoiFVM.mass_matrix","text":"mass_matrix(system)\n\n\nCalculate the mass matrix for use with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"diffeq/#VoronoiFVM.solve-Tuple{Module, AbstractArray, VoronoiFVM.AbstractSystem, Any}","page":"Interface to DifferentialEquations.jl","title":"VoronoiFVM.solve","text":"solve(DifferentialEquations, inival, system, tspan; \n      solver=nothing, \n      kwargs...)\n\nUse a  timesteping scheme  from DifferentialEquations.jl  to perform transient solution  of the  system. \n\nThe system must have a constant diagonal mass matrix.\n\nAny stiff solver  capable to work with mass matrices  is possible.  If the system  contains elliptic equations, it  needs to be a  DAE solver able to work with.  See a list here.\n\nThe  constructed  solver should  be  passed  as solver=  kwarg.   By default (if nothing is passed), the Rosenbrock23 solver is used.\n\nAll other  kwargs are  passed to  DifferentialEquations.solve(), see here  for an overview.\n\nIn order to avoid a package dependency on DifferentialEquations,  the module corresponding to that package is passed as the first argument.\n\nReturns a transient solution object sol containing stored solutions, see TransientSolution.\n\n\n\n\n\n","category":"method"}]
}
